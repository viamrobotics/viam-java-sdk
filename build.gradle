plugins {
    id "io.freefair.aggregate-javadoc" version "8.6"
}

group 'com.viam'
version '0.0.5'

repositories {
    google()
    mavenLocal()
    mavenCentral()
}

dependencies {
    javadoc project(':core:viam-core-sdk')
    javadoc project(':core:services:viam-core-sdk-mlmodel-service')
    javadoc project(':java:viam-java-sdk')
}

subprojects {
    group = rootProject.group
    version = rootProject.version

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    buildscript {
        repositories {
            google()
            mavenLocal()
            mavenCentral()
        }
    }

    repositories {
        google()
        mavenLocal()
        mavenCentral()
    }

    ext {
        min_api = 29
        target_api = 34
    }

    def pomConfig = {
        url "https://github.com/viamrobotics/viam-java-sdk"
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "https://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "viam"
                name "Viam"
                email "team-sdk@viam.com"
            }
        }
        scm {
            url "https://github.com/viamrobotics/viam-java-sdk"
        }
    }

    afterEvaluate { project ->
        if (project.name.contains("example")) {
            return
        }

        if (project.plugins.hasPlugin("groovy-gradle-plugin")) {
            return
        }

        def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
        def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'

        if (project.plugins.hasPlugin("java")) {
            compileTestJava {
                sourceCompatibility = JavaVersion.VERSION_11
                targetCompatibility = JavaVersion.VERSION_11
            }

            javadoc {
                title = "$project.name $version"
                options.addStringOption("source", "11")
                options.author true
                options.author = true
                options.version = true
                options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
                options.encoding = 'UTF-8'
                options.charSet 'UTF-8'
                options.docEncoding 'UTF-8'
                exclude '**/index.html', '**/*.kt', '**/test*/**'
            }

            tasks.register('sourcesJar', Jar) {
                from sourceSets.main.allJava
                archiveClassifier = 'sources'
            }

            tasks.register('javadocJar', Jar) {
                from javadoc
                archiveClassifier = 'javadoc'
            }

            publishing {
                publications {
                    maven(MavenPublication) {
                        from components.java
                        artifact sourcesJar
                        artifact javadocJar
                        pom.withXml {
                            def root = asNode()
                            def displayName = project.properties.get("pomDisplayName", project.name)
                            root.appendNode('name', "Viam Java/Android SDK - $displayName")
                            root.appendNode('description', "Viam Java/Android SDK - $displayName")
                            root.children().last() + pomConfig
                        }
                    }
                }
                repositories {
                    maven {
                        name = "OSSRH"
                        credentials {
                            username = findProperty("ossrhUsername")
                            password = findProperty("ossrhPassword")
                        }
                        if (version.endsWith('SNAPSHOT')) {
                            url = snapshotsRepoUrl
                        } else {
                            url = releasesRepoUrl
                        }
                    }
                }
            }
            signing {
                required { !System.getenv("DONT_SIGN") }
                def signingKey = findProperty("signingKey")
                def signingPassword = findProperty("signingPassword")
                useInMemoryPgpKeys(signingKey, signingPassword)
                sign publishing.publications.maven
            }
        }
        if (project.plugins.hasPlugin("com.android.library")) {
            publishing {
                publications {
                    maven(MavenPublication) {
                        groupId = groupId
                        artifactId = project.name
                        version = version
                        pom.withXml {
                            def root = asNode()
                            def displayName = project.properties.get("pomDisplayName", project.name)
                            root.appendNode('name', "Viam Java/Android SDK - $displayName")
                            root.appendNode('description', "Viam Java/Android SDK - $displayName")
                            root.children().last() + pomConfig
                        }

                        afterEvaluate {
                            from components.default
                        }
                    }
                }
                repositories {
                    maven {
                        name = "OSSRH"
                        credentials {
                            username = findProperty("ossrhUsername")
                            password = findProperty("ossrhPassword")
                        }
                        if (version.endsWith('SNAPSHOT')) {
                            url = snapshotsRepoUrl
                        } else {
                            url = releasesRepoUrl
                        }
                    }
                }
            }
            signing {
                required { !System.getenv("DONT_SIGN") }
                def signingKey = findProperty("signingKey")
                def signingPassword = findProperty("signingPassword")
                useInMemoryPgpKeys(signingKey, signingPassword)
                sign publishing.publications.maven
            }
        }
    }

    tasks.register("install") {
        dependsOn 'publishToMavenLocal'
    }
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}
