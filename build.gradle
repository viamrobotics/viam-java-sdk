group 'com.viam'
version '0.0.1'

subprojects {
    group = rootProject.group
    version = rootProject.version

    apply plugin: 'maven-publish'

    buildscript {
        repositories {
            google()
            mavenLocal()
            mavenCentral()
        }
    }

    repositories {
        google()
        mavenLocal()
        mavenCentral()
    }

    ext {
        min_api = 29
        target_api = 34
    }

    def pomConfig = {
        url "https://github.com/viamrobotics/viam-java-sdk"
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "https://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "viam"
                name "Viam"
                email "team-sdk@viam.com"
            }
        }
        scm {
            url "https://github.com/viamrobotics/viam-java-sdk"
        }
    }

    afterEvaluate { project ->
        if (project.name.contains("example")) {
            return
        }
        if (project.plugins.hasPlugin("java")) {
            compileTestJava {
                sourceCompatibility = JavaVersion.VERSION_11
                targetCompatibility = JavaVersion.VERSION_11
            }

            javadoc {
                title = "$project.name $version"
                options.addStringOption("source", "11")
                options.author true
                options.author = true
                options.version = true
                options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
                options.encoding = 'UTF-8'
                options.charSet 'UTF-8'
                options.docEncoding 'UTF-8'
                exclude '**/index.html', '**/*.kt', '**/test*/**'
            }

            tasks.register('sourcesJar', Jar) {
                from sourceSets.main.allJava
                archiveClassifier = 'sources'
            }

            tasks.register('javadocJar', Jar) {
                from javadoc
                archiveClassifier = 'javadoc'
            }

            publishing {
                publications {
                    if (project.plugins.hasPlugin("groovy-gradle-plugin")) {
                        pluginMaven(MavenPublication) {
                            pom.withXml {
                                def root = asNode()
                                def displayName = project.properties.get("pomDisplayName", project.name)
                                root.appendNode('name', "Viam Java/Android SDK - $displayName")
                                root.appendNode('description', "Viam Java/Android SDK - $displayName")
                                root.children().last() + pomConfig
                            }
                        }
                    } else {
                        maven(MavenPublication) {
                            from components.java
                            artifact sourcesJar
                            artifact javadocJar
                            pom.withXml {
                                def root = asNode()
                                def displayName = project.properties.get("pomDisplayName", project.name)
                                root.appendNode('name', "Viam Java/Android SDK - $displayName")
                                root.appendNode('description', "Viam Java/Android SDK - $displayName")
                                root.children().last() + pomConfig
                            }
                        }
                    }
                }
            }
        }
        if (project.plugins.hasPlugin("com.android.library")) {
            publishing {
                publications {
                    maven(MavenPublication) {
                        groupId = groupId
                        artifactId = project.name
                        version = version

                        afterEvaluate {
                            from components.default
                        }
                    }
                }
            }
        }
    }

    tasks.register("install") {
        dependsOn 'publishToMavenLocal'
    }
}
