// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/type/datetime.proto
// Protobuf Java Version: 4.27.2

package com.google.type;

/**
 * <pre>
 * Represents civil time (or occasionally physical time).
 *
 * This type can represent a civil time in one of a few possible ways:
 *
 * * When utc_offset is set and time_zone is unset: a civil time on a calendar
 * day with a particular offset from UTC.
 * * When time_zone is set and utc_offset is unset: a civil time on a calendar
 * day in a particular time zone.
 * * When neither time_zone nor utc_offset is set: a civil time on a calendar
 * day in local time.
 *
 * The date is relative to the Proleptic Gregorian Calendar.
 *
 * If year is 0, the DateTime is considered not to have a specific year. month
 * and day must have valid, non-zero values.
 *
 * This type may also be used to represent a physical time if all the date and
 * time fields are set and either case of the `time_offset` oneof is set.
 * Consider using `Timestamp` message for physical time instead. If your use
 * case also would like to store the user's timezone, that can be done in
 * another field.
 *
 * This type is more flexible than some applications may want. Make sure to
 * document and validate your application's limitations.
 * </pre>
 *
 * Protobuf type {@code google.type.DateTime}
 */
public  final class DateTime extends
    com.google.protobuf.GeneratedMessageLite<
        DateTime, DateTime.Builder> implements
    // @@protoc_insertion_point(message_implements:google.type.DateTime)
    DateTimeOrBuilder {
  private DateTime() {
  }
  private int timeOffsetCase_ = 0;
  private java.lang.Object timeOffset_;
  public enum TimeOffsetCase {
    UTC_OFFSET(8),
    TIME_ZONE(9),
    TIMEOFFSET_NOT_SET(0);
    private final int value;
    private TimeOffsetCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TimeOffsetCase valueOf(int value) {
      return forNumber(value);
    }

    public static TimeOffsetCase forNumber(int value) {
      switch (value) {
        case 8: return UTC_OFFSET;
        case 9: return TIME_ZONE;
        case 0: return TIMEOFFSET_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public TimeOffsetCase
  getTimeOffsetCase() {
    return TimeOffsetCase.forNumber(
        timeOffsetCase_);
  }

  private void clearTimeOffset() {
    timeOffsetCase_ = 0;
    timeOffset_ = null;
  }

  public static final int YEAR_FIELD_NUMBER = 1;
  private int year_;
  /**
   * <pre>
   * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a
   * datetime without a year.
   * </pre>
   *
   * <code>int32 year = 1 [json_name = "year"];</code>
   * @return The year.
   */
  @java.lang.Override
  public int getYear() {
    return year_;
  }
  /**
   * <pre>
   * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a
   * datetime without a year.
   * </pre>
   *
   * <code>int32 year = 1 [json_name = "year"];</code>
   * @param value The year to set.
   */
  private void setYear(int value) {
    
    year_ = value;
  }
  /**
   * <pre>
   * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a
   * datetime without a year.
   * </pre>
   *
   * <code>int32 year = 1 [json_name = "year"];</code>
   */
  private void clearYear() {

    year_ = 0;
  }

  public static final int MONTH_FIELD_NUMBER = 2;
  private int month_;
  /**
   * <pre>
   * Required. Month of year. Must be from 1 to 12.
   * </pre>
   *
   * <code>int32 month = 2 [json_name = "month"];</code>
   * @return The month.
   */
  @java.lang.Override
  public int getMonth() {
    return month_;
  }
  /**
   * <pre>
   * Required. Month of year. Must be from 1 to 12.
   * </pre>
   *
   * <code>int32 month = 2 [json_name = "month"];</code>
   * @param value The month to set.
   */
  private void setMonth(int value) {
    
    month_ = value;
  }
  /**
   * <pre>
   * Required. Month of year. Must be from 1 to 12.
   * </pre>
   *
   * <code>int32 month = 2 [json_name = "month"];</code>
   */
  private void clearMonth() {

    month_ = 0;
  }

  public static final int DAY_FIELD_NUMBER = 3;
  private int day_;
  /**
   * <pre>
   * Required. Day of month. Must be from 1 to 31 and valid for the year and
   * month.
   * </pre>
   *
   * <code>int32 day = 3 [json_name = "day"];</code>
   * @return The day.
   */
  @java.lang.Override
  public int getDay() {
    return day_;
  }
  /**
   * <pre>
   * Required. Day of month. Must be from 1 to 31 and valid for the year and
   * month.
   * </pre>
   *
   * <code>int32 day = 3 [json_name = "day"];</code>
   * @param value The day to set.
   */
  private void setDay(int value) {
    
    day_ = value;
  }
  /**
   * <pre>
   * Required. Day of month. Must be from 1 to 31 and valid for the year and
   * month.
   * </pre>
   *
   * <code>int32 day = 3 [json_name = "day"];</code>
   */
  private void clearDay() {

    day_ = 0;
  }

  public static final int HOURS_FIELD_NUMBER = 4;
  private int hours_;
  /**
   * <pre>
   * Required. Hours of day in 24 hour format. Should be from 0 to 23. An API
   * may choose to allow the value "24:00:00" for scenarios like business
   * closing time.
   * </pre>
   *
   * <code>int32 hours = 4 [json_name = "hours"];</code>
   * @return The hours.
   */
  @java.lang.Override
  public int getHours() {
    return hours_;
  }
  /**
   * <pre>
   * Required. Hours of day in 24 hour format. Should be from 0 to 23. An API
   * may choose to allow the value "24:00:00" for scenarios like business
   * closing time.
   * </pre>
   *
   * <code>int32 hours = 4 [json_name = "hours"];</code>
   * @param value The hours to set.
   */
  private void setHours(int value) {
    
    hours_ = value;
  }
  /**
   * <pre>
   * Required. Hours of day in 24 hour format. Should be from 0 to 23. An API
   * may choose to allow the value "24:00:00" for scenarios like business
   * closing time.
   * </pre>
   *
   * <code>int32 hours = 4 [json_name = "hours"];</code>
   */
  private void clearHours() {

    hours_ = 0;
  }

  public static final int MINUTES_FIELD_NUMBER = 5;
  private int minutes_;
  /**
   * <pre>
   * Required. Minutes of hour of day. Must be from 0 to 59.
   * </pre>
   *
   * <code>int32 minutes = 5 [json_name = "minutes"];</code>
   * @return The minutes.
   */
  @java.lang.Override
  public int getMinutes() {
    return minutes_;
  }
  /**
   * <pre>
   * Required. Minutes of hour of day. Must be from 0 to 59.
   * </pre>
   *
   * <code>int32 minutes = 5 [json_name = "minutes"];</code>
   * @param value The minutes to set.
   */
  private void setMinutes(int value) {
    
    minutes_ = value;
  }
  /**
   * <pre>
   * Required. Minutes of hour of day. Must be from 0 to 59.
   * </pre>
   *
   * <code>int32 minutes = 5 [json_name = "minutes"];</code>
   */
  private void clearMinutes() {

    minutes_ = 0;
  }

  public static final int SECONDS_FIELD_NUMBER = 6;
  private int seconds_;
  /**
   * <pre>
   * Required. Seconds of minutes of the time. Must normally be from 0 to 59. An
   * API may allow the value 60 if it allows leap-seconds.
   * </pre>
   *
   * <code>int32 seconds = 6 [json_name = "seconds"];</code>
   * @return The seconds.
   */
  @java.lang.Override
  public int getSeconds() {
    return seconds_;
  }
  /**
   * <pre>
   * Required. Seconds of minutes of the time. Must normally be from 0 to 59. An
   * API may allow the value 60 if it allows leap-seconds.
   * </pre>
   *
   * <code>int32 seconds = 6 [json_name = "seconds"];</code>
   * @param value The seconds to set.
   */
  private void setSeconds(int value) {
    
    seconds_ = value;
  }
  /**
   * <pre>
   * Required. Seconds of minutes of the time. Must normally be from 0 to 59. An
   * API may allow the value 60 if it allows leap-seconds.
   * </pre>
   *
   * <code>int32 seconds = 6 [json_name = "seconds"];</code>
   */
  private void clearSeconds() {

    seconds_ = 0;
  }

  public static final int NANOS_FIELD_NUMBER = 7;
  private int nanos_;
  /**
   * <pre>
   * Required. Fractions of seconds in nanoseconds. Must be from 0 to
   * 999,999,999.
   * </pre>
   *
   * <code>int32 nanos = 7 [json_name = "nanos"];</code>
   * @return The nanos.
   */
  @java.lang.Override
  public int getNanos() {
    return nanos_;
  }
  /**
   * <pre>
   * Required. Fractions of seconds in nanoseconds. Must be from 0 to
   * 999,999,999.
   * </pre>
   *
   * <code>int32 nanos = 7 [json_name = "nanos"];</code>
   * @param value The nanos to set.
   */
  private void setNanos(int value) {
    
    nanos_ = value;
  }
  /**
   * <pre>
   * Required. Fractions of seconds in nanoseconds. Must be from 0 to
   * 999,999,999.
   * </pre>
   *
   * <code>int32 nanos = 7 [json_name = "nanos"];</code>
   */
  private void clearNanos() {

    nanos_ = 0;
  }

  public static final int UTC_OFFSET_FIELD_NUMBER = 8;
  /**
   * <pre>
   * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
   * For example, a UTC offset of -4:00 would be represented as
   * { seconds: -14400 }.
   * </pre>
   *
   * <code>.google.protobuf.Duration utc_offset = 8 [json_name = "utcOffset"];</code>
   */
  @java.lang.Override
  public boolean hasUtcOffset() {
    return timeOffsetCase_ == 8;
  }
  /**
   * <pre>
   * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
   * For example, a UTC offset of -4:00 would be represented as
   * { seconds: -14400 }.
   * </pre>
   *
   * <code>.google.protobuf.Duration utc_offset = 8 [json_name = "utcOffset"];</code>
   */
  @java.lang.Override
  public com.google.protobuf.Duration getUtcOffset() {
    if (timeOffsetCase_ == 8) {
       return (com.google.protobuf.Duration) timeOffset_;
    }
    return com.google.protobuf.Duration.getDefaultInstance();
  }
  /**
   * <pre>
   * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
   * For example, a UTC offset of -4:00 would be represented as
   * { seconds: -14400 }.
   * </pre>
   *
   * <code>.google.protobuf.Duration utc_offset = 8 [json_name = "utcOffset"];</code>
   */
  private void setUtcOffset(com.google.protobuf.Duration value) {
    value.getClass();
  timeOffset_ = value;
    timeOffsetCase_ = 8;
  }
  /**
   * <pre>
   * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
   * For example, a UTC offset of -4:00 would be represented as
   * { seconds: -14400 }.
   * </pre>
   *
   * <code>.google.protobuf.Duration utc_offset = 8 [json_name = "utcOffset"];</code>
   */
  private void mergeUtcOffset(com.google.protobuf.Duration value) {
    value.getClass();
  if (timeOffsetCase_ == 8 &&
        timeOffset_ != com.google.protobuf.Duration.getDefaultInstance()) {
      timeOffset_ = com.google.protobuf.Duration.newBuilder((com.google.protobuf.Duration) timeOffset_)
          .mergeFrom(value).buildPartial();
    } else {
      timeOffset_ = value;
    }
    timeOffsetCase_ = 8;
  }
  /**
   * <pre>
   * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
   * For example, a UTC offset of -4:00 would be represented as
   * { seconds: -14400 }.
   * </pre>
   *
   * <code>.google.protobuf.Duration utc_offset = 8 [json_name = "utcOffset"];</code>
   */
  private void clearUtcOffset() {
    if (timeOffsetCase_ == 8) {
      timeOffsetCase_ = 0;
      timeOffset_ = null;
    }
  }

  public static final int TIME_ZONE_FIELD_NUMBER = 9;
  /**
   * <pre>
   * Time zone.
   * </pre>
   *
   * <code>.google.type.TimeZone time_zone = 9 [json_name = "timeZone"];</code>
   */
  @java.lang.Override
  public boolean hasTimeZone() {
    return timeOffsetCase_ == 9;
  }
  /**
   * <pre>
   * Time zone.
   * </pre>
   *
   * <code>.google.type.TimeZone time_zone = 9 [json_name = "timeZone"];</code>
   */
  @java.lang.Override
  public com.google.type.TimeZone getTimeZone() {
    if (timeOffsetCase_ == 9) {
       return (com.google.type.TimeZone) timeOffset_;
    }
    return com.google.type.TimeZone.getDefaultInstance();
  }
  /**
   * <pre>
   * Time zone.
   * </pre>
   *
   * <code>.google.type.TimeZone time_zone = 9 [json_name = "timeZone"];</code>
   */
  private void setTimeZone(com.google.type.TimeZone value) {
    value.getClass();
  timeOffset_ = value;
    timeOffsetCase_ = 9;
  }
  /**
   * <pre>
   * Time zone.
   * </pre>
   *
   * <code>.google.type.TimeZone time_zone = 9 [json_name = "timeZone"];</code>
   */
  private void mergeTimeZone(com.google.type.TimeZone value) {
    value.getClass();
  if (timeOffsetCase_ == 9 &&
        timeOffset_ != com.google.type.TimeZone.getDefaultInstance()) {
      timeOffset_ = com.google.type.TimeZone.newBuilder((com.google.type.TimeZone) timeOffset_)
          .mergeFrom(value).buildPartial();
    } else {
      timeOffset_ = value;
    }
    timeOffsetCase_ = 9;
  }
  /**
   * <pre>
   * Time zone.
   * </pre>
   *
   * <code>.google.type.TimeZone time_zone = 9 [json_name = "timeZone"];</code>
   */
  private void clearTimeZone() {
    if (timeOffsetCase_ == 9) {
      timeOffsetCase_ = 0;
      timeOffset_ = null;
    }
  }

  public static com.google.type.DateTime parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.DateTime parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.DateTime parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.DateTime parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.DateTime parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.DateTime parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.DateTime parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.type.DateTime parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.type.DateTime parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.type.DateTime parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.type.DateTime parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.type.DateTime parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.type.DateTime prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Represents civil time (or occasionally physical time).
   *
   * This type can represent a civil time in one of a few possible ways:
   *
   * * When utc_offset is set and time_zone is unset: a civil time on a calendar
   * day with a particular offset from UTC.
   * * When time_zone is set and utc_offset is unset: a civil time on a calendar
   * day in a particular time zone.
   * * When neither time_zone nor utc_offset is set: a civil time on a calendar
   * day in local time.
   *
   * The date is relative to the Proleptic Gregorian Calendar.
   *
   * If year is 0, the DateTime is considered not to have a specific year. month
   * and day must have valid, non-zero values.
   *
   * This type may also be used to represent a physical time if all the date and
   * time fields are set and either case of the `time_offset` oneof is set.
   * Consider using `Timestamp` message for physical time instead. If your use
   * case also would like to store the user's timezone, that can be done in
   * another field.
   *
   * This type is more flexible than some applications may want. Make sure to
   * document and validate your application's limitations.
   * </pre>
   *
   * Protobuf type {@code google.type.DateTime}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.type.DateTime, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.type.DateTime)
      com.google.type.DateTimeOrBuilder {
    // Construct using com.google.type.DateTime.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public TimeOffsetCase
        getTimeOffsetCase() {
      return instance.getTimeOffsetCase();
    }

    public Builder clearTimeOffset() {
      copyOnWrite();
      instance.clearTimeOffset();
      return this;
    }


    /**
     * <pre>
     * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a
     * datetime without a year.
     * </pre>
     *
     * <code>int32 year = 1 [json_name = "year"];</code>
     * @return The year.
     */
    @java.lang.Override
    public int getYear() {
      return instance.getYear();
    }
    /**
     * <pre>
     * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a
     * datetime without a year.
     * </pre>
     *
     * <code>int32 year = 1 [json_name = "year"];</code>
     * @param value The year to set.
     * @return This builder for chaining.
     */
    public Builder setYear(int value) {
      copyOnWrite();
      instance.setYear(value);
      return this;
    }
    /**
     * <pre>
     * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a
     * datetime without a year.
     * </pre>
     *
     * <code>int32 year = 1 [json_name = "year"];</code>
     * @return This builder for chaining.
     */
    public Builder clearYear() {
      copyOnWrite();
      instance.clearYear();
      return this;
    }

    /**
     * <pre>
     * Required. Month of year. Must be from 1 to 12.
     * </pre>
     *
     * <code>int32 month = 2 [json_name = "month"];</code>
     * @return The month.
     */
    @java.lang.Override
    public int getMonth() {
      return instance.getMonth();
    }
    /**
     * <pre>
     * Required. Month of year. Must be from 1 to 12.
     * </pre>
     *
     * <code>int32 month = 2 [json_name = "month"];</code>
     * @param value The month to set.
     * @return This builder for chaining.
     */
    public Builder setMonth(int value) {
      copyOnWrite();
      instance.setMonth(value);
      return this;
    }
    /**
     * <pre>
     * Required. Month of year. Must be from 1 to 12.
     * </pre>
     *
     * <code>int32 month = 2 [json_name = "month"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMonth() {
      copyOnWrite();
      instance.clearMonth();
      return this;
    }

    /**
     * <pre>
     * Required. Day of month. Must be from 1 to 31 and valid for the year and
     * month.
     * </pre>
     *
     * <code>int32 day = 3 [json_name = "day"];</code>
     * @return The day.
     */
    @java.lang.Override
    public int getDay() {
      return instance.getDay();
    }
    /**
     * <pre>
     * Required. Day of month. Must be from 1 to 31 and valid for the year and
     * month.
     * </pre>
     *
     * <code>int32 day = 3 [json_name = "day"];</code>
     * @param value The day to set.
     * @return This builder for chaining.
     */
    public Builder setDay(int value) {
      copyOnWrite();
      instance.setDay(value);
      return this;
    }
    /**
     * <pre>
     * Required. Day of month. Must be from 1 to 31 and valid for the year and
     * month.
     * </pre>
     *
     * <code>int32 day = 3 [json_name = "day"];</code>
     * @return This builder for chaining.
     */
    public Builder clearDay() {
      copyOnWrite();
      instance.clearDay();
      return this;
    }

    /**
     * <pre>
     * Required. Hours of day in 24 hour format. Should be from 0 to 23. An API
     * may choose to allow the value "24:00:00" for scenarios like business
     * closing time.
     * </pre>
     *
     * <code>int32 hours = 4 [json_name = "hours"];</code>
     * @return The hours.
     */
    @java.lang.Override
    public int getHours() {
      return instance.getHours();
    }
    /**
     * <pre>
     * Required. Hours of day in 24 hour format. Should be from 0 to 23. An API
     * may choose to allow the value "24:00:00" for scenarios like business
     * closing time.
     * </pre>
     *
     * <code>int32 hours = 4 [json_name = "hours"];</code>
     * @param value The hours to set.
     * @return This builder for chaining.
     */
    public Builder setHours(int value) {
      copyOnWrite();
      instance.setHours(value);
      return this;
    }
    /**
     * <pre>
     * Required. Hours of day in 24 hour format. Should be from 0 to 23. An API
     * may choose to allow the value "24:00:00" for scenarios like business
     * closing time.
     * </pre>
     *
     * <code>int32 hours = 4 [json_name = "hours"];</code>
     * @return This builder for chaining.
     */
    public Builder clearHours() {
      copyOnWrite();
      instance.clearHours();
      return this;
    }

    /**
     * <pre>
     * Required. Minutes of hour of day. Must be from 0 to 59.
     * </pre>
     *
     * <code>int32 minutes = 5 [json_name = "minutes"];</code>
     * @return The minutes.
     */
    @java.lang.Override
    public int getMinutes() {
      return instance.getMinutes();
    }
    /**
     * <pre>
     * Required. Minutes of hour of day. Must be from 0 to 59.
     * </pre>
     *
     * <code>int32 minutes = 5 [json_name = "minutes"];</code>
     * @param value The minutes to set.
     * @return This builder for chaining.
     */
    public Builder setMinutes(int value) {
      copyOnWrite();
      instance.setMinutes(value);
      return this;
    }
    /**
     * <pre>
     * Required. Minutes of hour of day. Must be from 0 to 59.
     * </pre>
     *
     * <code>int32 minutes = 5 [json_name = "minutes"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMinutes() {
      copyOnWrite();
      instance.clearMinutes();
      return this;
    }

    /**
     * <pre>
     * Required. Seconds of minutes of the time. Must normally be from 0 to 59. An
     * API may allow the value 60 if it allows leap-seconds.
     * </pre>
     *
     * <code>int32 seconds = 6 [json_name = "seconds"];</code>
     * @return The seconds.
     */
    @java.lang.Override
    public int getSeconds() {
      return instance.getSeconds();
    }
    /**
     * <pre>
     * Required. Seconds of minutes of the time. Must normally be from 0 to 59. An
     * API may allow the value 60 if it allows leap-seconds.
     * </pre>
     *
     * <code>int32 seconds = 6 [json_name = "seconds"];</code>
     * @param value The seconds to set.
     * @return This builder for chaining.
     */
    public Builder setSeconds(int value) {
      copyOnWrite();
      instance.setSeconds(value);
      return this;
    }
    /**
     * <pre>
     * Required. Seconds of minutes of the time. Must normally be from 0 to 59. An
     * API may allow the value 60 if it allows leap-seconds.
     * </pre>
     *
     * <code>int32 seconds = 6 [json_name = "seconds"];</code>
     * @return This builder for chaining.
     */
    public Builder clearSeconds() {
      copyOnWrite();
      instance.clearSeconds();
      return this;
    }

    /**
     * <pre>
     * Required. Fractions of seconds in nanoseconds. Must be from 0 to
     * 999,999,999.
     * </pre>
     *
     * <code>int32 nanos = 7 [json_name = "nanos"];</code>
     * @return The nanos.
     */
    @java.lang.Override
    public int getNanos() {
      return instance.getNanos();
    }
    /**
     * <pre>
     * Required. Fractions of seconds in nanoseconds. Must be from 0 to
     * 999,999,999.
     * </pre>
     *
     * <code>int32 nanos = 7 [json_name = "nanos"];</code>
     * @param value The nanos to set.
     * @return This builder for chaining.
     */
    public Builder setNanos(int value) {
      copyOnWrite();
      instance.setNanos(value);
      return this;
    }
    /**
     * <pre>
     * Required. Fractions of seconds in nanoseconds. Must be from 0 to
     * 999,999,999.
     * </pre>
     *
     * <code>int32 nanos = 7 [json_name = "nanos"];</code>
     * @return This builder for chaining.
     */
    public Builder clearNanos() {
      copyOnWrite();
      instance.clearNanos();
      return this;
    }

    /**
     * <pre>
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
     * For example, a UTC offset of -4:00 would be represented as
     * { seconds: -14400 }.
     * </pre>
     *
     * <code>.google.protobuf.Duration utc_offset = 8 [json_name = "utcOffset"];</code>
     */
    @java.lang.Override
    public boolean hasUtcOffset() {
      return instance.hasUtcOffset();
    }
    /**
     * <pre>
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
     * For example, a UTC offset of -4:00 would be represented as
     * { seconds: -14400 }.
     * </pre>
     *
     * <code>.google.protobuf.Duration utc_offset = 8 [json_name = "utcOffset"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Duration getUtcOffset() {
      return instance.getUtcOffset();
    }
    /**
     * <pre>
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
     * For example, a UTC offset of -4:00 would be represented as
     * { seconds: -14400 }.
     * </pre>
     *
     * <code>.google.protobuf.Duration utc_offset = 8 [json_name = "utcOffset"];</code>
     */
    public Builder setUtcOffset(com.google.protobuf.Duration value) {
      copyOnWrite();
      instance.setUtcOffset(value);
      return this;
    }
    /**
     * <pre>
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
     * For example, a UTC offset of -4:00 would be represented as
     * { seconds: -14400 }.
     * </pre>
     *
     * <code>.google.protobuf.Duration utc_offset = 8 [json_name = "utcOffset"];</code>
     */
    public Builder setUtcOffset(
        com.google.protobuf.Duration.Builder builderForValue) {
      copyOnWrite();
      instance.setUtcOffset(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
     * For example, a UTC offset of -4:00 would be represented as
     * { seconds: -14400 }.
     * </pre>
     *
     * <code>.google.protobuf.Duration utc_offset = 8 [json_name = "utcOffset"];</code>
     */
    public Builder mergeUtcOffset(com.google.protobuf.Duration value) {
      copyOnWrite();
      instance.mergeUtcOffset(value);
      return this;
    }
    /**
     * <pre>
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
     * For example, a UTC offset of -4:00 would be represented as
     * { seconds: -14400 }.
     * </pre>
     *
     * <code>.google.protobuf.Duration utc_offset = 8 [json_name = "utcOffset"];</code>
     */
    public Builder clearUtcOffset() {
      copyOnWrite();
      instance.clearUtcOffset();
      return this;
    }

    /**
     * <pre>
     * Time zone.
     * </pre>
     *
     * <code>.google.type.TimeZone time_zone = 9 [json_name = "timeZone"];</code>
     */
    @java.lang.Override
    public boolean hasTimeZone() {
      return instance.hasTimeZone();
    }
    /**
     * <pre>
     * Time zone.
     * </pre>
     *
     * <code>.google.type.TimeZone time_zone = 9 [json_name = "timeZone"];</code>
     */
    @java.lang.Override
    public com.google.type.TimeZone getTimeZone() {
      return instance.getTimeZone();
    }
    /**
     * <pre>
     * Time zone.
     * </pre>
     *
     * <code>.google.type.TimeZone time_zone = 9 [json_name = "timeZone"];</code>
     */
    public Builder setTimeZone(com.google.type.TimeZone value) {
      copyOnWrite();
      instance.setTimeZone(value);
      return this;
    }
    /**
     * <pre>
     * Time zone.
     * </pre>
     *
     * <code>.google.type.TimeZone time_zone = 9 [json_name = "timeZone"];</code>
     */
    public Builder setTimeZone(
        com.google.type.TimeZone.Builder builderForValue) {
      copyOnWrite();
      instance.setTimeZone(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Time zone.
     * </pre>
     *
     * <code>.google.type.TimeZone time_zone = 9 [json_name = "timeZone"];</code>
     */
    public Builder mergeTimeZone(com.google.type.TimeZone value) {
      copyOnWrite();
      instance.mergeTimeZone(value);
      return this;
    }
    /**
     * <pre>
     * Time zone.
     * </pre>
     *
     * <code>.google.type.TimeZone time_zone = 9 [json_name = "timeZone"];</code>
     */
    public Builder clearTimeZone() {
      copyOnWrite();
      instance.clearTimeZone();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.type.DateTime)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.type.DateTime();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "timeOffset_",
            "timeOffsetCase_",
            "year_",
            "month_",
            "day_",
            "hours_",
            "minutes_",
            "seconds_",
            "nanos_",
            com.google.protobuf.Duration.class,
            com.google.type.TimeZone.class,
          };
          java.lang.String info =
              "\u0000\t\u0001\u0000\u0001\t\t\u0000\u0000\u0000\u0001\u0004\u0002\u0004\u0003\u0004" +
              "\u0004\u0004\u0005\u0004\u0006\u0004\u0007\u0004\b<\u0000\t<\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.type.DateTime> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.type.DateTime.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.type.DateTime>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.type.DateTime)
  private static final com.google.type.DateTime DEFAULT_INSTANCE;
  static {
    DateTime defaultInstance = new DateTime();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      DateTime.class, defaultInstance);
  }

  public static com.google.type.DateTime getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<DateTime> PARSER;

  public static com.google.protobuf.Parser<DateTime> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

