// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/type/phone_number.proto
// Protobuf Java Version: 4.27.2

package com.google.type;

/**
 * <pre>
 * An object representing a phone number, suitable as an API wire format.
 *
 * This representation:
 *
 * - should not be used for locale-specific formatting of a phone number, such
 * as "+1 (650) 253-0000 ext. 123"
 *
 * - is not designed for efficient storage
 * - may not be suitable for dialing - specialized libraries (see references)
 * should be used to parse the number for that purpose
 *
 * To do something meaningful with this number, such as format it for various
 * use-cases, convert it to an `i18n.phonenumbers.PhoneNumber` object first.
 *
 * For instance, in Java this would be:
 *
 * com.google.type.PhoneNumber wireProto =
 * com.google.type.PhoneNumber.newBuilder().build();
 * com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber =
 * PhoneNumberUtil.getInstance().parse(wireProto.getE164Number(), "ZZ");
 * if (!wireProto.getExtension().isEmpty()) {
 * phoneNumber.setExtension(wireProto.getExtension());
 * }
 *
 * Reference(s):
 * - https://github.com/google/libphonenumber
 * </pre>
 *
 * Protobuf type {@code google.type.PhoneNumber}
 */
public  final class PhoneNumber extends
    com.google.protobuf.GeneratedMessageLite<
        PhoneNumber, PhoneNumber.Builder> implements
    // @@protoc_insertion_point(message_implements:google.type.PhoneNumber)
    PhoneNumberOrBuilder {
  private PhoneNumber() {
    extension_ = "";
  }
  public interface ShortCodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.type.PhoneNumber.ShortCode)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Required. The BCP-47 region code of the location where calls to this
     * short code can be made, such as "US" and "BB".
     *
     * Reference(s):
     * - http://www.unicode.org/reports/tr35/#unicode_region_subtag
     * </pre>
     *
     * <code>string region_code = 1 [json_name = "regionCode"];</code>
     * @return The regionCode.
     */
    java.lang.String getRegionCode();
    /**
     * <pre>
     * Required. The BCP-47 region code of the location where calls to this
     * short code can be made, such as "US" and "BB".
     *
     * Reference(s):
     * - http://www.unicode.org/reports/tr35/#unicode_region_subtag
     * </pre>
     *
     * <code>string region_code = 1 [json_name = "regionCode"];</code>
     * @return The bytes for regionCode.
     */
    com.google.protobuf.ByteString
        getRegionCodeBytes();

    /**
     * <pre>
     * Required. The short code digits, without a leading plus ('+') or country
     * calling code, e.g. "611".
     * </pre>
     *
     * <code>string number = 2 [json_name = "number"];</code>
     * @return The number.
     */
    java.lang.String getNumber();
    /**
     * <pre>
     * Required. The short code digits, without a leading plus ('+') or country
     * calling code, e.g. "611".
     * </pre>
     *
     * <code>string number = 2 [json_name = "number"];</code>
     * @return The bytes for number.
     */
    com.google.protobuf.ByteString
        getNumberBytes();
  }
  /**
   * <pre>
   * An object representing a short code, which is a phone number that is
   * typically much shorter than regular phone numbers and can be used to
   * address messages in MMS and SMS systems, as well as for abbreviated dialing
   * (e.g. "Text 611 to see how many minutes you have remaining on your plan.").
   *
   * Short codes are restricted to a region and are not internationally
   * dialable, which means the same short code can exist in different regions,
   * with different usage and pricing, even if those regions share the same
   * country calling code (e.g. US and CA).
   * </pre>
   *
   * Protobuf type {@code google.type.PhoneNumber.ShortCode}
   */
  public  static final class ShortCode extends
      com.google.protobuf.GeneratedMessageLite<
          ShortCode, ShortCode.Builder> implements
      // @@protoc_insertion_point(message_implements:google.type.PhoneNumber.ShortCode)
      ShortCodeOrBuilder {
    private ShortCode() {
      regionCode_ = "";
      number_ = "";
    }
    public static final int REGION_CODE_FIELD_NUMBER = 1;
    private java.lang.String regionCode_;
    /**
     * <pre>
     * Required. The BCP-47 region code of the location where calls to this
     * short code can be made, such as "US" and "BB".
     *
     * Reference(s):
     * - http://www.unicode.org/reports/tr35/#unicode_region_subtag
     * </pre>
     *
     * <code>string region_code = 1 [json_name = "regionCode"];</code>
     * @return The regionCode.
     */
    @java.lang.Override
    public java.lang.String getRegionCode() {
      return regionCode_;
    }
    /**
     * <pre>
     * Required. The BCP-47 region code of the location where calls to this
     * short code can be made, such as "US" and "BB".
     *
     * Reference(s):
     * - http://www.unicode.org/reports/tr35/#unicode_region_subtag
     * </pre>
     *
     * <code>string region_code = 1 [json_name = "regionCode"];</code>
     * @return The bytes for regionCode.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRegionCodeBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(regionCode_);
    }
    /**
     * <pre>
     * Required. The BCP-47 region code of the location where calls to this
     * short code can be made, such as "US" and "BB".
     *
     * Reference(s):
     * - http://www.unicode.org/reports/tr35/#unicode_region_subtag
     * </pre>
     *
     * <code>string region_code = 1 [json_name = "regionCode"];</code>
     * @param value The regionCode to set.
     */
    private void setRegionCode(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      regionCode_ = value;
    }
    /**
     * <pre>
     * Required. The BCP-47 region code of the location where calls to this
     * short code can be made, such as "US" and "BB".
     *
     * Reference(s):
     * - http://www.unicode.org/reports/tr35/#unicode_region_subtag
     * </pre>
     *
     * <code>string region_code = 1 [json_name = "regionCode"];</code>
     */
    private void clearRegionCode() {

      regionCode_ = getDefaultInstance().getRegionCode();
    }
    /**
     * <pre>
     * Required. The BCP-47 region code of the location where calls to this
     * short code can be made, such as "US" and "BB".
     *
     * Reference(s):
     * - http://www.unicode.org/reports/tr35/#unicode_region_subtag
     * </pre>
     *
     * <code>string region_code = 1 [json_name = "regionCode"];</code>
     * @param value The bytes for regionCode to set.
     */
    private void setRegionCodeBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      regionCode_ = value.toStringUtf8();

    }

    public static final int NUMBER_FIELD_NUMBER = 2;
    private java.lang.String number_;
    /**
     * <pre>
     * Required. The short code digits, without a leading plus ('+') or country
     * calling code, e.g. "611".
     * </pre>
     *
     * <code>string number = 2 [json_name = "number"];</code>
     * @return The number.
     */
    @java.lang.Override
    public java.lang.String getNumber() {
      return number_;
    }
    /**
     * <pre>
     * Required. The short code digits, without a leading plus ('+') or country
     * calling code, e.g. "611".
     * </pre>
     *
     * <code>string number = 2 [json_name = "number"];</code>
     * @return The bytes for number.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNumberBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(number_);
    }
    /**
     * <pre>
     * Required. The short code digits, without a leading plus ('+') or country
     * calling code, e.g. "611".
     * </pre>
     *
     * <code>string number = 2 [json_name = "number"];</code>
     * @param value The number to set.
     */
    private void setNumber(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      number_ = value;
    }
    /**
     * <pre>
     * Required. The short code digits, without a leading plus ('+') or country
     * calling code, e.g. "611".
     * </pre>
     *
     * <code>string number = 2 [json_name = "number"];</code>
     */
    private void clearNumber() {

      number_ = getDefaultInstance().getNumber();
    }
    /**
     * <pre>
     * Required. The short code digits, without a leading plus ('+') or country
     * calling code, e.g. "611".
     * </pre>
     *
     * <code>string number = 2 [json_name = "number"];</code>
     * @param value The bytes for number to set.
     */
    private void setNumberBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      number_ = value.toStringUtf8();

    }

    public static com.google.type.PhoneNumber.ShortCode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.type.PhoneNumber.ShortCode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.type.PhoneNumber.ShortCode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.type.PhoneNumber.ShortCode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.type.PhoneNumber.ShortCode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.type.PhoneNumber.ShortCode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.type.PhoneNumber.ShortCode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.type.PhoneNumber.ShortCode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static com.google.type.PhoneNumber.ShortCode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static com.google.type.PhoneNumber.ShortCode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.type.PhoneNumber.ShortCode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.type.PhoneNumber.ShortCode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.type.PhoneNumber.ShortCode prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * An object representing a short code, which is a phone number that is
     * typically much shorter than regular phone numbers and can be used to
     * address messages in MMS and SMS systems, as well as for abbreviated dialing
     * (e.g. "Text 611 to see how many minutes you have remaining on your plan.").
     *
     * Short codes are restricted to a region and are not internationally
     * dialable, which means the same short code can exist in different regions,
     * with different usage and pricing, even if those regions share the same
     * country calling code (e.g. US and CA).
     * </pre>
     *
     * Protobuf type {@code google.type.PhoneNumber.ShortCode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.type.PhoneNumber.ShortCode, Builder> implements
        // @@protoc_insertion_point(builder_implements:google.type.PhoneNumber.ShortCode)
        com.google.type.PhoneNumber.ShortCodeOrBuilder {
      // Construct using com.google.type.PhoneNumber.ShortCode.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Required. The BCP-47 region code of the location where calls to this
       * short code can be made, such as "US" and "BB".
       *
       * Reference(s):
       * - http://www.unicode.org/reports/tr35/#unicode_region_subtag
       * </pre>
       *
       * <code>string region_code = 1 [json_name = "regionCode"];</code>
       * @return The regionCode.
       */
      @java.lang.Override
      public java.lang.String getRegionCode() {
        return instance.getRegionCode();
      }
      /**
       * <pre>
       * Required. The BCP-47 region code of the location where calls to this
       * short code can be made, such as "US" and "BB".
       *
       * Reference(s):
       * - http://www.unicode.org/reports/tr35/#unicode_region_subtag
       * </pre>
       *
       * <code>string region_code = 1 [json_name = "regionCode"];</code>
       * @return The bytes for regionCode.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getRegionCodeBytes() {
        return instance.getRegionCodeBytes();
      }
      /**
       * <pre>
       * Required. The BCP-47 region code of the location where calls to this
       * short code can be made, such as "US" and "BB".
       *
       * Reference(s):
       * - http://www.unicode.org/reports/tr35/#unicode_region_subtag
       * </pre>
       *
       * <code>string region_code = 1 [json_name = "regionCode"];</code>
       * @param value The regionCode to set.
       * @return This builder for chaining.
       */
      public Builder setRegionCode(
          java.lang.String value) {
        copyOnWrite();
        instance.setRegionCode(value);
        return this;
      }
      /**
       * <pre>
       * Required. The BCP-47 region code of the location where calls to this
       * short code can be made, such as "US" and "BB".
       *
       * Reference(s):
       * - http://www.unicode.org/reports/tr35/#unicode_region_subtag
       * </pre>
       *
       * <code>string region_code = 1 [json_name = "regionCode"];</code>
       * @return This builder for chaining.
       */
      public Builder clearRegionCode() {
        copyOnWrite();
        instance.clearRegionCode();
        return this;
      }
      /**
       * <pre>
       * Required. The BCP-47 region code of the location where calls to this
       * short code can be made, such as "US" and "BB".
       *
       * Reference(s):
       * - http://www.unicode.org/reports/tr35/#unicode_region_subtag
       * </pre>
       *
       * <code>string region_code = 1 [json_name = "regionCode"];</code>
       * @param value The bytes for regionCode to set.
       * @return This builder for chaining.
       */
      public Builder setRegionCodeBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setRegionCodeBytes(value);
        return this;
      }

      /**
       * <pre>
       * Required. The short code digits, without a leading plus ('+') or country
       * calling code, e.g. "611".
       * </pre>
       *
       * <code>string number = 2 [json_name = "number"];</code>
       * @return The number.
       */
      @java.lang.Override
      public java.lang.String getNumber() {
        return instance.getNumber();
      }
      /**
       * <pre>
       * Required. The short code digits, without a leading plus ('+') or country
       * calling code, e.g. "611".
       * </pre>
       *
       * <code>string number = 2 [json_name = "number"];</code>
       * @return The bytes for number.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNumberBytes() {
        return instance.getNumberBytes();
      }
      /**
       * <pre>
       * Required. The short code digits, without a leading plus ('+') or country
       * calling code, e.g. "611".
       * </pre>
       *
       * <code>string number = 2 [json_name = "number"];</code>
       * @param value The number to set.
       * @return This builder for chaining.
       */
      public Builder setNumber(
          java.lang.String value) {
        copyOnWrite();
        instance.setNumber(value);
        return this;
      }
      /**
       * <pre>
       * Required. The short code digits, without a leading plus ('+') or country
       * calling code, e.g. "611".
       * </pre>
       *
       * <code>string number = 2 [json_name = "number"];</code>
       * @return This builder for chaining.
       */
      public Builder clearNumber() {
        copyOnWrite();
        instance.clearNumber();
        return this;
      }
      /**
       * <pre>
       * Required. The short code digits, without a leading plus ('+') or country
       * calling code, e.g. "611".
       * </pre>
       *
       * <code>string number = 2 [json_name = "number"];</code>
       * @param value The bytes for number to set.
       * @return This builder for chaining.
       */
      public Builder setNumberBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNumberBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:google.type.PhoneNumber.ShortCode)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.type.PhoneNumber.ShortCode();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "regionCode_",
              "number_",
            };
            java.lang.String info =
                "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u0208\u0002\u0208" +
                "";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.type.PhoneNumber.ShortCode> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.type.PhoneNumber.ShortCode.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.type.PhoneNumber.ShortCode>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:google.type.PhoneNumber.ShortCode)
    private static final com.google.type.PhoneNumber.ShortCode DEFAULT_INSTANCE;
    static {
      ShortCode defaultInstance = new ShortCode();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ShortCode.class, defaultInstance);
    }

    public static com.google.type.PhoneNumber.ShortCode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ShortCode> PARSER;

    public static com.google.protobuf.Parser<ShortCode> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int kindCase_ = 0;
  private java.lang.Object kind_;
  public enum KindCase {
    E164_NUMBER(1),
    SHORT_CODE(2),
    KIND_NOT_SET(0);
    private final int value;
    private KindCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static KindCase valueOf(int value) {
      return forNumber(value);
    }

    public static KindCase forNumber(int value) {
      switch (value) {
        case 1: return E164_NUMBER;
        case 2: return SHORT_CODE;
        case 0: return KIND_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public KindCase
  getKindCase() {
    return KindCase.forNumber(
        kindCase_);
  }

  private void clearKind() {
    kindCase_ = 0;
    kind_ = null;
  }

  public static final int E164_NUMBER_FIELD_NUMBER = 1;
  /**
   * <pre>
   * The phone number, represented as a leading plus sign ('+'), followed by a
   * phone number that uses a relaxed ITU E.164 format consisting of the
   * country calling code (1 to 3 digits) and the subscriber number, with no
   * additional spaces or formatting, e.g.:
   * - correct: "+15552220123"
   * - incorrect: "+1 (555) 222-01234 x123".
   *
   * The ITU E.164 format limits the latter to 12 digits, but in practice not
   * all countries respect that, so we relax that restriction here.
   * National-only numbers are not allowed.
   *
   * References:
   * - https://www.itu.int/rec/T-REC-E.164-201011-I
   * - https://en.wikipedia.org/wiki/E.164.
   * - https://en.wikipedia.org/wiki/List_of_country_calling_codes
   * </pre>
   *
   * <code>string e164_number = 1 [json_name = "e164Number"];</code>
   * @return Whether the e164Number field is set.
   */
  @java.lang.Override
  public boolean hasE164Number() {
    return kindCase_ == 1;
  }
  /**
   * <pre>
   * The phone number, represented as a leading plus sign ('+'), followed by a
   * phone number that uses a relaxed ITU E.164 format consisting of the
   * country calling code (1 to 3 digits) and the subscriber number, with no
   * additional spaces or formatting, e.g.:
   * - correct: "+15552220123"
   * - incorrect: "+1 (555) 222-01234 x123".
   *
   * The ITU E.164 format limits the latter to 12 digits, but in practice not
   * all countries respect that, so we relax that restriction here.
   * National-only numbers are not allowed.
   *
   * References:
   * - https://www.itu.int/rec/T-REC-E.164-201011-I
   * - https://en.wikipedia.org/wiki/E.164.
   * - https://en.wikipedia.org/wiki/List_of_country_calling_codes
   * </pre>
   *
   * <code>string e164_number = 1 [json_name = "e164Number"];</code>
   * @return The e164Number.
   */
  @java.lang.Override
  public java.lang.String getE164Number() {
    java.lang.String ref = "";
    if (kindCase_ == 1) {
      ref = (java.lang.String) kind_;
    }
    return ref;
  }
  /**
   * <pre>
   * The phone number, represented as a leading plus sign ('+'), followed by a
   * phone number that uses a relaxed ITU E.164 format consisting of the
   * country calling code (1 to 3 digits) and the subscriber number, with no
   * additional spaces or formatting, e.g.:
   * - correct: "+15552220123"
   * - incorrect: "+1 (555) 222-01234 x123".
   *
   * The ITU E.164 format limits the latter to 12 digits, but in practice not
   * all countries respect that, so we relax that restriction here.
   * National-only numbers are not allowed.
   *
   * References:
   * - https://www.itu.int/rec/T-REC-E.164-201011-I
   * - https://en.wikipedia.org/wiki/E.164.
   * - https://en.wikipedia.org/wiki/List_of_country_calling_codes
   * </pre>
   *
   * <code>string e164_number = 1 [json_name = "e164Number"];</code>
   * @return The bytes for e164Number.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getE164NumberBytes() {
    java.lang.String ref = "";
    if (kindCase_ == 1) {
      ref = (java.lang.String) kind_;
    }
    return com.google.protobuf.ByteString.copyFromUtf8(ref);
  }
  /**
   * <pre>
   * The phone number, represented as a leading plus sign ('+'), followed by a
   * phone number that uses a relaxed ITU E.164 format consisting of the
   * country calling code (1 to 3 digits) and the subscriber number, with no
   * additional spaces or formatting, e.g.:
   * - correct: "+15552220123"
   * - incorrect: "+1 (555) 222-01234 x123".
   *
   * The ITU E.164 format limits the latter to 12 digits, but in practice not
   * all countries respect that, so we relax that restriction here.
   * National-only numbers are not allowed.
   *
   * References:
   * - https://www.itu.int/rec/T-REC-E.164-201011-I
   * - https://en.wikipedia.org/wiki/E.164.
   * - https://en.wikipedia.org/wiki/List_of_country_calling_codes
   * </pre>
   *
   * <code>string e164_number = 1 [json_name = "e164Number"];</code>
   * @param value The e164Number to set.
   */
  private void setE164Number(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  kindCase_ = 1;
    kind_ = value;
  }
  /**
   * <pre>
   * The phone number, represented as a leading plus sign ('+'), followed by a
   * phone number that uses a relaxed ITU E.164 format consisting of the
   * country calling code (1 to 3 digits) and the subscriber number, with no
   * additional spaces or formatting, e.g.:
   * - correct: "+15552220123"
   * - incorrect: "+1 (555) 222-01234 x123".
   *
   * The ITU E.164 format limits the latter to 12 digits, but in practice not
   * all countries respect that, so we relax that restriction here.
   * National-only numbers are not allowed.
   *
   * References:
   * - https://www.itu.int/rec/T-REC-E.164-201011-I
   * - https://en.wikipedia.org/wiki/E.164.
   * - https://en.wikipedia.org/wiki/List_of_country_calling_codes
   * </pre>
   *
   * <code>string e164_number = 1 [json_name = "e164Number"];</code>
   */
  private void clearE164Number() {
    if (kindCase_ == 1) {
      kindCase_ = 0;
      kind_ = null;
    }
  }
  /**
   * <pre>
   * The phone number, represented as a leading plus sign ('+'), followed by a
   * phone number that uses a relaxed ITU E.164 format consisting of the
   * country calling code (1 to 3 digits) and the subscriber number, with no
   * additional spaces or formatting, e.g.:
   * - correct: "+15552220123"
   * - incorrect: "+1 (555) 222-01234 x123".
   *
   * The ITU E.164 format limits the latter to 12 digits, but in practice not
   * all countries respect that, so we relax that restriction here.
   * National-only numbers are not allowed.
   *
   * References:
   * - https://www.itu.int/rec/T-REC-E.164-201011-I
   * - https://en.wikipedia.org/wiki/E.164.
   * - https://en.wikipedia.org/wiki/List_of_country_calling_codes
   * </pre>
   *
   * <code>string e164_number = 1 [json_name = "e164Number"];</code>
   * @param value The bytes for e164Number to set.
   */
  private void setE164NumberBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    kind_ = value.toStringUtf8();
    kindCase_ = 1;
  }

  public static final int SHORT_CODE_FIELD_NUMBER = 2;
  /**
   * <pre>
   * A short code.
   *
   * Reference(s):
   * - https://en.wikipedia.org/wiki/Short_code
   * </pre>
   *
   * <code>.google.type.PhoneNumber.ShortCode short_code = 2 [json_name = "shortCode"];</code>
   */
  @java.lang.Override
  public boolean hasShortCode() {
    return kindCase_ == 2;
  }
  /**
   * <pre>
   * A short code.
   *
   * Reference(s):
   * - https://en.wikipedia.org/wiki/Short_code
   * </pre>
   *
   * <code>.google.type.PhoneNumber.ShortCode short_code = 2 [json_name = "shortCode"];</code>
   */
  @java.lang.Override
  public com.google.type.PhoneNumber.ShortCode getShortCode() {
    if (kindCase_ == 2) {
       return (com.google.type.PhoneNumber.ShortCode) kind_;
    }
    return com.google.type.PhoneNumber.ShortCode.getDefaultInstance();
  }
  /**
   * <pre>
   * A short code.
   *
   * Reference(s):
   * - https://en.wikipedia.org/wiki/Short_code
   * </pre>
   *
   * <code>.google.type.PhoneNumber.ShortCode short_code = 2 [json_name = "shortCode"];</code>
   */
  private void setShortCode(com.google.type.PhoneNumber.ShortCode value) {
    value.getClass();
  kind_ = value;
    kindCase_ = 2;
  }
  /**
   * <pre>
   * A short code.
   *
   * Reference(s):
   * - https://en.wikipedia.org/wiki/Short_code
   * </pre>
   *
   * <code>.google.type.PhoneNumber.ShortCode short_code = 2 [json_name = "shortCode"];</code>
   */
  private void mergeShortCode(com.google.type.PhoneNumber.ShortCode value) {
    value.getClass();
  if (kindCase_ == 2 &&
        kind_ != com.google.type.PhoneNumber.ShortCode.getDefaultInstance()) {
      kind_ = com.google.type.PhoneNumber.ShortCode.newBuilder((com.google.type.PhoneNumber.ShortCode) kind_)
          .mergeFrom(value).buildPartial();
    } else {
      kind_ = value;
    }
    kindCase_ = 2;
  }
  /**
   * <pre>
   * A short code.
   *
   * Reference(s):
   * - https://en.wikipedia.org/wiki/Short_code
   * </pre>
   *
   * <code>.google.type.PhoneNumber.ShortCode short_code = 2 [json_name = "shortCode"];</code>
   */
  private void clearShortCode() {
    if (kindCase_ == 2) {
      kindCase_ = 0;
      kind_ = null;
    }
  }

  public static final int EXTENSION_FIELD_NUMBER = 3;
  private java.lang.String extension_;
  /**
   * <pre>
   * The phone number's extension. The extension is not standardized in ITU
   * recommendations, except for being defined as a series of numbers with a
   * maximum length of 40 digits. Other than digits, some other dialing
   * characters such as ',' (indicating a wait) or '#' may be stored here.
   *
   * Note that no regions currently use extensions with short codes, so this
   * field is normally only set in conjunction with an E.164 number. It is held
   * separately from the E.164 number to allow for short code extensions in the
   * future.
   * </pre>
   *
   * <code>string extension = 3 [json_name = "extension"];</code>
   * @return The extension.
   */
  @java.lang.Override
  public java.lang.String getExtension() {
    return extension_;
  }
  /**
   * <pre>
   * The phone number's extension. The extension is not standardized in ITU
   * recommendations, except for being defined as a series of numbers with a
   * maximum length of 40 digits. Other than digits, some other dialing
   * characters such as ',' (indicating a wait) or '#' may be stored here.
   *
   * Note that no regions currently use extensions with short codes, so this
   * field is normally only set in conjunction with an E.164 number. It is held
   * separately from the E.164 number to allow for short code extensions in the
   * future.
   * </pre>
   *
   * <code>string extension = 3 [json_name = "extension"];</code>
   * @return The bytes for extension.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getExtensionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(extension_);
  }
  /**
   * <pre>
   * The phone number's extension. The extension is not standardized in ITU
   * recommendations, except for being defined as a series of numbers with a
   * maximum length of 40 digits. Other than digits, some other dialing
   * characters such as ',' (indicating a wait) or '#' may be stored here.
   *
   * Note that no regions currently use extensions with short codes, so this
   * field is normally only set in conjunction with an E.164 number. It is held
   * separately from the E.164 number to allow for short code extensions in the
   * future.
   * </pre>
   *
   * <code>string extension = 3 [json_name = "extension"];</code>
   * @param value The extension to set.
   */
  private void setExtension(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    extension_ = value;
  }
  /**
   * <pre>
   * The phone number's extension. The extension is not standardized in ITU
   * recommendations, except for being defined as a series of numbers with a
   * maximum length of 40 digits. Other than digits, some other dialing
   * characters such as ',' (indicating a wait) or '#' may be stored here.
   *
   * Note that no regions currently use extensions with short codes, so this
   * field is normally only set in conjunction with an E.164 number. It is held
   * separately from the E.164 number to allow for short code extensions in the
   * future.
   * </pre>
   *
   * <code>string extension = 3 [json_name = "extension"];</code>
   */
  private void clearExtension() {

    extension_ = getDefaultInstance().getExtension();
  }
  /**
   * <pre>
   * The phone number's extension. The extension is not standardized in ITU
   * recommendations, except for being defined as a series of numbers with a
   * maximum length of 40 digits. Other than digits, some other dialing
   * characters such as ',' (indicating a wait) or '#' may be stored here.
   *
   * Note that no regions currently use extensions with short codes, so this
   * field is normally only set in conjunction with an E.164 number. It is held
   * separately from the E.164 number to allow for short code extensions in the
   * future.
   * </pre>
   *
   * <code>string extension = 3 [json_name = "extension"];</code>
   * @param value The bytes for extension to set.
   */
  private void setExtensionBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    extension_ = value.toStringUtf8();

  }

  public static com.google.type.PhoneNumber parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.PhoneNumber parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.PhoneNumber parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.PhoneNumber parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.PhoneNumber parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.PhoneNumber parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.PhoneNumber parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.type.PhoneNumber parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.type.PhoneNumber parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.type.PhoneNumber parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.type.PhoneNumber parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.type.PhoneNumber parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.type.PhoneNumber prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * An object representing a phone number, suitable as an API wire format.
   *
   * This representation:
   *
   * - should not be used for locale-specific formatting of a phone number, such
   * as "+1 (650) 253-0000 ext. 123"
   *
   * - is not designed for efficient storage
   * - may not be suitable for dialing - specialized libraries (see references)
   * should be used to parse the number for that purpose
   *
   * To do something meaningful with this number, such as format it for various
   * use-cases, convert it to an `i18n.phonenumbers.PhoneNumber` object first.
   *
   * For instance, in Java this would be:
   *
   * com.google.type.PhoneNumber wireProto =
   * com.google.type.PhoneNumber.newBuilder().build();
   * com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber =
   * PhoneNumberUtil.getInstance().parse(wireProto.getE164Number(), "ZZ");
   * if (!wireProto.getExtension().isEmpty()) {
   * phoneNumber.setExtension(wireProto.getExtension());
   * }
   *
   * Reference(s):
   * - https://github.com/google/libphonenumber
   * </pre>
   *
   * Protobuf type {@code google.type.PhoneNumber}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.type.PhoneNumber, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.type.PhoneNumber)
      com.google.type.PhoneNumberOrBuilder {
    // Construct using com.google.type.PhoneNumber.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public KindCase
        getKindCase() {
      return instance.getKindCase();
    }

    public Builder clearKind() {
      copyOnWrite();
      instance.clearKind();
      return this;
    }


    /**
     * <pre>
     * The phone number, represented as a leading plus sign ('+'), followed by a
     * phone number that uses a relaxed ITU E.164 format consisting of the
     * country calling code (1 to 3 digits) and the subscriber number, with no
     * additional spaces or formatting, e.g.:
     * - correct: "+15552220123"
     * - incorrect: "+1 (555) 222-01234 x123".
     *
     * The ITU E.164 format limits the latter to 12 digits, but in practice not
     * all countries respect that, so we relax that restriction here.
     * National-only numbers are not allowed.
     *
     * References:
     * - https://www.itu.int/rec/T-REC-E.164-201011-I
     * - https://en.wikipedia.org/wiki/E.164.
     * - https://en.wikipedia.org/wiki/List_of_country_calling_codes
     * </pre>
     *
     * <code>string e164_number = 1 [json_name = "e164Number"];</code>
     * @return Whether the e164Number field is set.
     */
    @java.lang.Override
    public boolean hasE164Number() {
      return instance.hasE164Number();
    }
    /**
     * <pre>
     * The phone number, represented as a leading plus sign ('+'), followed by a
     * phone number that uses a relaxed ITU E.164 format consisting of the
     * country calling code (1 to 3 digits) and the subscriber number, with no
     * additional spaces or formatting, e.g.:
     * - correct: "+15552220123"
     * - incorrect: "+1 (555) 222-01234 x123".
     *
     * The ITU E.164 format limits the latter to 12 digits, but in practice not
     * all countries respect that, so we relax that restriction here.
     * National-only numbers are not allowed.
     *
     * References:
     * - https://www.itu.int/rec/T-REC-E.164-201011-I
     * - https://en.wikipedia.org/wiki/E.164.
     * - https://en.wikipedia.org/wiki/List_of_country_calling_codes
     * </pre>
     *
     * <code>string e164_number = 1 [json_name = "e164Number"];</code>
     * @return The e164Number.
     */
    @java.lang.Override
    public java.lang.String getE164Number() {
      return instance.getE164Number();
    }
    /**
     * <pre>
     * The phone number, represented as a leading plus sign ('+'), followed by a
     * phone number that uses a relaxed ITU E.164 format consisting of the
     * country calling code (1 to 3 digits) and the subscriber number, with no
     * additional spaces or formatting, e.g.:
     * - correct: "+15552220123"
     * - incorrect: "+1 (555) 222-01234 x123".
     *
     * The ITU E.164 format limits the latter to 12 digits, but in practice not
     * all countries respect that, so we relax that restriction here.
     * National-only numbers are not allowed.
     *
     * References:
     * - https://www.itu.int/rec/T-REC-E.164-201011-I
     * - https://en.wikipedia.org/wiki/E.164.
     * - https://en.wikipedia.org/wiki/List_of_country_calling_codes
     * </pre>
     *
     * <code>string e164_number = 1 [json_name = "e164Number"];</code>
     * @return The bytes for e164Number.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getE164NumberBytes() {
      return instance.getE164NumberBytes();
    }
    /**
     * <pre>
     * The phone number, represented as a leading plus sign ('+'), followed by a
     * phone number that uses a relaxed ITU E.164 format consisting of the
     * country calling code (1 to 3 digits) and the subscriber number, with no
     * additional spaces or formatting, e.g.:
     * - correct: "+15552220123"
     * - incorrect: "+1 (555) 222-01234 x123".
     *
     * The ITU E.164 format limits the latter to 12 digits, but in practice not
     * all countries respect that, so we relax that restriction here.
     * National-only numbers are not allowed.
     *
     * References:
     * - https://www.itu.int/rec/T-REC-E.164-201011-I
     * - https://en.wikipedia.org/wiki/E.164.
     * - https://en.wikipedia.org/wiki/List_of_country_calling_codes
     * </pre>
     *
     * <code>string e164_number = 1 [json_name = "e164Number"];</code>
     * @param value The e164Number to set.
     * @return This builder for chaining.
     */
    public Builder setE164Number(
        java.lang.String value) {
      copyOnWrite();
      instance.setE164Number(value);
      return this;
    }
    /**
     * <pre>
     * The phone number, represented as a leading plus sign ('+'), followed by a
     * phone number that uses a relaxed ITU E.164 format consisting of the
     * country calling code (1 to 3 digits) and the subscriber number, with no
     * additional spaces or formatting, e.g.:
     * - correct: "+15552220123"
     * - incorrect: "+1 (555) 222-01234 x123".
     *
     * The ITU E.164 format limits the latter to 12 digits, but in practice not
     * all countries respect that, so we relax that restriction here.
     * National-only numbers are not allowed.
     *
     * References:
     * - https://www.itu.int/rec/T-REC-E.164-201011-I
     * - https://en.wikipedia.org/wiki/E.164.
     * - https://en.wikipedia.org/wiki/List_of_country_calling_codes
     * </pre>
     *
     * <code>string e164_number = 1 [json_name = "e164Number"];</code>
     * @return This builder for chaining.
     */
    public Builder clearE164Number() {
      copyOnWrite();
      instance.clearE164Number();
      return this;
    }
    /**
     * <pre>
     * The phone number, represented as a leading plus sign ('+'), followed by a
     * phone number that uses a relaxed ITU E.164 format consisting of the
     * country calling code (1 to 3 digits) and the subscriber number, with no
     * additional spaces or formatting, e.g.:
     * - correct: "+15552220123"
     * - incorrect: "+1 (555) 222-01234 x123".
     *
     * The ITU E.164 format limits the latter to 12 digits, but in practice not
     * all countries respect that, so we relax that restriction here.
     * National-only numbers are not allowed.
     *
     * References:
     * - https://www.itu.int/rec/T-REC-E.164-201011-I
     * - https://en.wikipedia.org/wiki/E.164.
     * - https://en.wikipedia.org/wiki/List_of_country_calling_codes
     * </pre>
     *
     * <code>string e164_number = 1 [json_name = "e164Number"];</code>
     * @param value The bytes for e164Number to set.
     * @return This builder for chaining.
     */
    public Builder setE164NumberBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setE164NumberBytes(value);
      return this;
    }

    /**
     * <pre>
     * A short code.
     *
     * Reference(s):
     * - https://en.wikipedia.org/wiki/Short_code
     * </pre>
     *
     * <code>.google.type.PhoneNumber.ShortCode short_code = 2 [json_name = "shortCode"];</code>
     */
    @java.lang.Override
    public boolean hasShortCode() {
      return instance.hasShortCode();
    }
    /**
     * <pre>
     * A short code.
     *
     * Reference(s):
     * - https://en.wikipedia.org/wiki/Short_code
     * </pre>
     *
     * <code>.google.type.PhoneNumber.ShortCode short_code = 2 [json_name = "shortCode"];</code>
     */
    @java.lang.Override
    public com.google.type.PhoneNumber.ShortCode getShortCode() {
      return instance.getShortCode();
    }
    /**
     * <pre>
     * A short code.
     *
     * Reference(s):
     * - https://en.wikipedia.org/wiki/Short_code
     * </pre>
     *
     * <code>.google.type.PhoneNumber.ShortCode short_code = 2 [json_name = "shortCode"];</code>
     */
    public Builder setShortCode(com.google.type.PhoneNumber.ShortCode value) {
      copyOnWrite();
      instance.setShortCode(value);
      return this;
    }
    /**
     * <pre>
     * A short code.
     *
     * Reference(s):
     * - https://en.wikipedia.org/wiki/Short_code
     * </pre>
     *
     * <code>.google.type.PhoneNumber.ShortCode short_code = 2 [json_name = "shortCode"];</code>
     */
    public Builder setShortCode(
        com.google.type.PhoneNumber.ShortCode.Builder builderForValue) {
      copyOnWrite();
      instance.setShortCode(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A short code.
     *
     * Reference(s):
     * - https://en.wikipedia.org/wiki/Short_code
     * </pre>
     *
     * <code>.google.type.PhoneNumber.ShortCode short_code = 2 [json_name = "shortCode"];</code>
     */
    public Builder mergeShortCode(com.google.type.PhoneNumber.ShortCode value) {
      copyOnWrite();
      instance.mergeShortCode(value);
      return this;
    }
    /**
     * <pre>
     * A short code.
     *
     * Reference(s):
     * - https://en.wikipedia.org/wiki/Short_code
     * </pre>
     *
     * <code>.google.type.PhoneNumber.ShortCode short_code = 2 [json_name = "shortCode"];</code>
     */
    public Builder clearShortCode() {
      copyOnWrite();
      instance.clearShortCode();
      return this;
    }

    /**
     * <pre>
     * The phone number's extension. The extension is not standardized in ITU
     * recommendations, except for being defined as a series of numbers with a
     * maximum length of 40 digits. Other than digits, some other dialing
     * characters such as ',' (indicating a wait) or '#' may be stored here.
     *
     * Note that no regions currently use extensions with short codes, so this
     * field is normally only set in conjunction with an E.164 number. It is held
     * separately from the E.164 number to allow for short code extensions in the
     * future.
     * </pre>
     *
     * <code>string extension = 3 [json_name = "extension"];</code>
     * @return The extension.
     */
    @java.lang.Override
    public java.lang.String getExtension() {
      return instance.getExtension();
    }
    /**
     * <pre>
     * The phone number's extension. The extension is not standardized in ITU
     * recommendations, except for being defined as a series of numbers with a
     * maximum length of 40 digits. Other than digits, some other dialing
     * characters such as ',' (indicating a wait) or '#' may be stored here.
     *
     * Note that no regions currently use extensions with short codes, so this
     * field is normally only set in conjunction with an E.164 number. It is held
     * separately from the E.164 number to allow for short code extensions in the
     * future.
     * </pre>
     *
     * <code>string extension = 3 [json_name = "extension"];</code>
     * @return The bytes for extension.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getExtensionBytes() {
      return instance.getExtensionBytes();
    }
    /**
     * <pre>
     * The phone number's extension. The extension is not standardized in ITU
     * recommendations, except for being defined as a series of numbers with a
     * maximum length of 40 digits. Other than digits, some other dialing
     * characters such as ',' (indicating a wait) or '#' may be stored here.
     *
     * Note that no regions currently use extensions with short codes, so this
     * field is normally only set in conjunction with an E.164 number. It is held
     * separately from the E.164 number to allow for short code extensions in the
     * future.
     * </pre>
     *
     * <code>string extension = 3 [json_name = "extension"];</code>
     * @param value The extension to set.
     * @return This builder for chaining.
     */
    public Builder setExtension(
        java.lang.String value) {
      copyOnWrite();
      instance.setExtension(value);
      return this;
    }
    /**
     * <pre>
     * The phone number's extension. The extension is not standardized in ITU
     * recommendations, except for being defined as a series of numbers with a
     * maximum length of 40 digits. Other than digits, some other dialing
     * characters such as ',' (indicating a wait) or '#' may be stored here.
     *
     * Note that no regions currently use extensions with short codes, so this
     * field is normally only set in conjunction with an E.164 number. It is held
     * separately from the E.164 number to allow for short code extensions in the
     * future.
     * </pre>
     *
     * <code>string extension = 3 [json_name = "extension"];</code>
     * @return This builder for chaining.
     */
    public Builder clearExtension() {
      copyOnWrite();
      instance.clearExtension();
      return this;
    }
    /**
     * <pre>
     * The phone number's extension. The extension is not standardized in ITU
     * recommendations, except for being defined as a series of numbers with a
     * maximum length of 40 digits. Other than digits, some other dialing
     * characters such as ',' (indicating a wait) or '#' may be stored here.
     *
     * Note that no regions currently use extensions with short codes, so this
     * field is normally only set in conjunction with an E.164 number. It is held
     * separately from the E.164 number to allow for short code extensions in the
     * future.
     * </pre>
     *
     * <code>string extension = 3 [json_name = "extension"];</code>
     * @param value The bytes for extension to set.
     * @return This builder for chaining.
     */
    public Builder setExtensionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setExtensionBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.type.PhoneNumber)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.type.PhoneNumber();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "kind_",
            "kindCase_",
            com.google.type.PhoneNumber.ShortCode.class,
            "extension_",
          };
          java.lang.String info =
              "\u0000\u0003\u0001\u0000\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u023b\u0000\u0002" +
              "<\u0000\u0003\u0208";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.type.PhoneNumber> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.type.PhoneNumber.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.type.PhoneNumber>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.type.PhoneNumber)
  private static final com.google.type.PhoneNumber DEFAULT_INSTANCE;
  static {
    PhoneNumber defaultInstance = new PhoneNumber();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      PhoneNumber.class, defaultInstance);
  }

  public static com.google.type.PhoneNumber getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<PhoneNumber> PARSER;

  public static com.google.protobuf.Parser<PhoneNumber> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

