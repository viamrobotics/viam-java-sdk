// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/type/date.proto
// Protobuf Java Version: 4.27.2

package com.google.type;

/**
 * <pre>
 * Represents a whole or partial calendar date, such as a birthday. The time of
 * day and time zone are either specified elsewhere or are insignificant. The
 * date is relative to the Gregorian Calendar. This can represent one of the
 * following:
 *
 * * A full date, with non-zero year, month, and day values
 * * A month and day value, with a zero year, such as an anniversary
 * * A year on its own, with zero month and day values
 * * A year and month value, with a zero day, such as a credit card expiration
 * date
 *
 * Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and
 * `google.protobuf.Timestamp`.
 * </pre>
 *
 * Protobuf type {@code google.type.Date}
 */
public  final class Date extends
    com.google.protobuf.GeneratedMessageLite<
        Date, Date.Builder> implements
    // @@protoc_insertion_point(message_implements:google.type.Date)
    DateOrBuilder {
  private Date() {
  }
  public static final int YEAR_FIELD_NUMBER = 1;
  private int year_;
  /**
   * <pre>
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without
   * a year.
   * </pre>
   *
   * <code>int32 year = 1 [json_name = "year"];</code>
   * @return The year.
   */
  @java.lang.Override
  public int getYear() {
    return year_;
  }
  /**
   * <pre>
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without
   * a year.
   * </pre>
   *
   * <code>int32 year = 1 [json_name = "year"];</code>
   * @param value The year to set.
   */
  private void setYear(int value) {
    
    year_ = value;
  }
  /**
   * <pre>
   * Year of the date. Must be from 1 to 9999, or 0 to specify a date without
   * a year.
   * </pre>
   *
   * <code>int32 year = 1 [json_name = "year"];</code>
   */
  private void clearYear() {

    year_ = 0;
  }

  public static final int MONTH_FIELD_NUMBER = 2;
  private int month_;
  /**
   * <pre>
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a
   * month and day.
   * </pre>
   *
   * <code>int32 month = 2 [json_name = "month"];</code>
   * @return The month.
   */
  @java.lang.Override
  public int getMonth() {
    return month_;
  }
  /**
   * <pre>
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a
   * month and day.
   * </pre>
   *
   * <code>int32 month = 2 [json_name = "month"];</code>
   * @param value The month to set.
   */
  private void setMonth(int value) {
    
    month_ = value;
  }
  /**
   * <pre>
   * Month of a year. Must be from 1 to 12, or 0 to specify a year without a
   * month and day.
   * </pre>
   *
   * <code>int32 month = 2 [json_name = "month"];</code>
   */
  private void clearMonth() {

    month_ = 0;
  }

  public static final int DAY_FIELD_NUMBER = 3;
  private int day_;
  /**
   * <pre>
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
   * to specify a year by itself or a year and month where the day isn't
   * significant.
   * </pre>
   *
   * <code>int32 day = 3 [json_name = "day"];</code>
   * @return The day.
   */
  @java.lang.Override
  public int getDay() {
    return day_;
  }
  /**
   * <pre>
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
   * to specify a year by itself or a year and month where the day isn't
   * significant.
   * </pre>
   *
   * <code>int32 day = 3 [json_name = "day"];</code>
   * @param value The day to set.
   */
  private void setDay(int value) {
    
    day_ = value;
  }
  /**
   * <pre>
   * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
   * to specify a year by itself or a year and month where the day isn't
   * significant.
   * </pre>
   *
   * <code>int32 day = 3 [json_name = "day"];</code>
   */
  private void clearDay() {

    day_ = 0;
  }

  public static com.google.type.Date parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.Date parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.Date parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.Date parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.Date parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.Date parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.Date parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.type.Date parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.type.Date parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.type.Date parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.type.Date parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.type.Date parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.type.Date prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Represents a whole or partial calendar date, such as a birthday. The time of
   * day and time zone are either specified elsewhere or are insignificant. The
   * date is relative to the Gregorian Calendar. This can represent one of the
   * following:
   *
   * * A full date, with non-zero year, month, and day values
   * * A month and day value, with a zero year, such as an anniversary
   * * A year on its own, with zero month and day values
   * * A year and month value, with a zero day, such as a credit card expiration
   * date
   *
   * Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and
   * `google.protobuf.Timestamp`.
   * </pre>
   *
   * Protobuf type {@code google.type.Date}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.type.Date, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.type.Date)
      com.google.type.DateOrBuilder {
    // Construct using com.google.type.Date.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without
     * a year.
     * </pre>
     *
     * <code>int32 year = 1 [json_name = "year"];</code>
     * @return The year.
     */
    @java.lang.Override
    public int getYear() {
      return instance.getYear();
    }
    /**
     * <pre>
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without
     * a year.
     * </pre>
     *
     * <code>int32 year = 1 [json_name = "year"];</code>
     * @param value The year to set.
     * @return This builder for chaining.
     */
    public Builder setYear(int value) {
      copyOnWrite();
      instance.setYear(value);
      return this;
    }
    /**
     * <pre>
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without
     * a year.
     * </pre>
     *
     * <code>int32 year = 1 [json_name = "year"];</code>
     * @return This builder for chaining.
     */
    public Builder clearYear() {
      copyOnWrite();
      instance.clearYear();
      return this;
    }

    /**
     * <pre>
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a
     * month and day.
     * </pre>
     *
     * <code>int32 month = 2 [json_name = "month"];</code>
     * @return The month.
     */
    @java.lang.Override
    public int getMonth() {
      return instance.getMonth();
    }
    /**
     * <pre>
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a
     * month and day.
     * </pre>
     *
     * <code>int32 month = 2 [json_name = "month"];</code>
     * @param value The month to set.
     * @return This builder for chaining.
     */
    public Builder setMonth(int value) {
      copyOnWrite();
      instance.setMonth(value);
      return this;
    }
    /**
     * <pre>
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a
     * month and day.
     * </pre>
     *
     * <code>int32 month = 2 [json_name = "month"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMonth() {
      copyOnWrite();
      instance.clearMonth();
      return this;
    }

    /**
     * <pre>
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
     * to specify a year by itself or a year and month where the day isn't
     * significant.
     * </pre>
     *
     * <code>int32 day = 3 [json_name = "day"];</code>
     * @return The day.
     */
    @java.lang.Override
    public int getDay() {
      return instance.getDay();
    }
    /**
     * <pre>
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
     * to specify a year by itself or a year and month where the day isn't
     * significant.
     * </pre>
     *
     * <code>int32 day = 3 [json_name = "day"];</code>
     * @param value The day to set.
     * @return This builder for chaining.
     */
    public Builder setDay(int value) {
      copyOnWrite();
      instance.setDay(value);
      return this;
    }
    /**
     * <pre>
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
     * to specify a year by itself or a year and month where the day isn't
     * significant.
     * </pre>
     *
     * <code>int32 day = 3 [json_name = "day"];</code>
     * @return This builder for chaining.
     */
    public Builder clearDay() {
      copyOnWrite();
      instance.clearDay();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.type.Date)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.type.Date();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "year_",
            "month_",
            "day_",
          };
          java.lang.String info =
              "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u0004\u0002\u0004" +
              "\u0003\u0004";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.type.Date> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.type.Date.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.type.Date>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.type.Date)
  private static final com.google.type.Date DEFAULT_INSTANCE;
  static {
    Date defaultInstance = new Date();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      Date.class, defaultInstance);
  }

  public static com.google.type.Date getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Date> PARSER;

  public static com.google.protobuf.Parser<Date> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

