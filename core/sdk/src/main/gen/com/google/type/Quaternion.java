// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/type/quaternion.proto
// Protobuf Java Version: 4.27.2

package com.google.type;

/**
 * <pre>
 * A quaternion is defined as the quotient of two directed lines in a
 * three-dimensional space or equivalently as the quotient of two Euclidean
 * vectors (https://en.wikipedia.org/wiki/Quaternion).
 *
 * Quaternions are often used in calculations involving three-dimensional
 * rotations (https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation),
 * as they provide greater mathematical robustness by avoiding the gimbal lock
 * problems that can be encountered when using Euler angles
 * (https://en.wikipedia.org/wiki/Gimbal_lock).
 *
 * Quaternions are generally represented in this form:
 *
 * w + xi + yj + zk
 *
 * where x, y, z, and w are real numbers, and i, j, and k are three imaginary
 * numbers.
 *
 * Our naming choice `(x, y, z, w)` comes from the desire to avoid confusion for
 * those interested in the geometric properties of the quaternion in the 3D
 * Cartesian space. Other texts often use alternative names or subscripts, such
 * as `(a, b, c, d)`, `(1, i, j, k)`, or `(0, 1, 2, 3)`, which are perhaps
 * better suited for mathematical interpretations.
 *
 * To avoid any confusion, as well as to maintain compatibility with a large
 * number of software libraries, the quaternions represented using the protocol
 * buffer below *must* follow the Hamilton convention, which defines `ij = k`
 * (i.e. a right-handed algebra), and therefore:
 *
 * i^2 = j^2 = k^2 = ijk = −1
 * ij = −ji = k
 * jk = −kj = i
 * ki = −ik = j
 *
 * Please DO NOT use this to represent quaternions that follow the JPL
 * convention, or any of the other quaternion flavors out there.
 *
 * Definitions:
 *
 * - Quaternion norm (or magnitude): `sqrt(x^2 + y^2 + z^2 + w^2)`.
 * - Unit (or normalized) quaternion: a quaternion whose norm is 1.
 * - Pure quaternion: a quaternion whose scalar component (`w`) is 0.
 * - Rotation quaternion: a unit quaternion used to represent rotation.
 * - Orientation quaternion: a unit quaternion used to represent orientation.
 *
 * A quaternion can be normalized by dividing it by its norm. The resulting
 * quaternion maintains the same direction, but has a norm of 1, i.e. it moves
 * on the unit sphere. This is generally necessary for rotation and orientation
 * quaternions, to avoid rounding errors:
 * https://en.wikipedia.org/wiki/Rotation_formalisms_in_three_dimensions
 *
 * Note that `(x, y, z, w)` and `(-x, -y, -z, -w)` represent the same rotation,
 * but normalization would be even more useful, e.g. for comparison purposes, if
 * it would produce a unique representation. It is thus recommended that `w` be
 * kept positive, which can be achieved by changing all the signs when `w` is
 * negative.
 * </pre>
 *
 * Protobuf type {@code google.type.Quaternion}
 */
public  final class Quaternion extends
    com.google.protobuf.GeneratedMessageLite<
        Quaternion, Quaternion.Builder> implements
    // @@protoc_insertion_point(message_implements:google.type.Quaternion)
    QuaternionOrBuilder {
  private Quaternion() {
  }
  public static final int X_FIELD_NUMBER = 1;
  private double x_;
  /**
   * <pre>
   * The x component.
   * </pre>
   *
   * <code>double x = 1 [json_name = "x"];</code>
   * @return The x.
   */
  @java.lang.Override
  public double getX() {
    return x_;
  }
  /**
   * <pre>
   * The x component.
   * </pre>
   *
   * <code>double x = 1 [json_name = "x"];</code>
   * @param value The x to set.
   */
  private void setX(double value) {
    
    x_ = value;
  }
  /**
   * <pre>
   * The x component.
   * </pre>
   *
   * <code>double x = 1 [json_name = "x"];</code>
   */
  private void clearX() {

    x_ = 0D;
  }

  public static final int Y_FIELD_NUMBER = 2;
  private double y_;
  /**
   * <pre>
   * The y component.
   * </pre>
   *
   * <code>double y = 2 [json_name = "y"];</code>
   * @return The y.
   */
  @java.lang.Override
  public double getY() {
    return y_;
  }
  /**
   * <pre>
   * The y component.
   * </pre>
   *
   * <code>double y = 2 [json_name = "y"];</code>
   * @param value The y to set.
   */
  private void setY(double value) {
    
    y_ = value;
  }
  /**
   * <pre>
   * The y component.
   * </pre>
   *
   * <code>double y = 2 [json_name = "y"];</code>
   */
  private void clearY() {

    y_ = 0D;
  }

  public static final int Z_FIELD_NUMBER = 3;
  private double z_;
  /**
   * <pre>
   * The z component.
   * </pre>
   *
   * <code>double z = 3 [json_name = "z"];</code>
   * @return The z.
   */
  @java.lang.Override
  public double getZ() {
    return z_;
  }
  /**
   * <pre>
   * The z component.
   * </pre>
   *
   * <code>double z = 3 [json_name = "z"];</code>
   * @param value The z to set.
   */
  private void setZ(double value) {
    
    z_ = value;
  }
  /**
   * <pre>
   * The z component.
   * </pre>
   *
   * <code>double z = 3 [json_name = "z"];</code>
   */
  private void clearZ() {

    z_ = 0D;
  }

  public static final int W_FIELD_NUMBER = 4;
  private double w_;
  /**
   * <pre>
   * The scalar component.
   * </pre>
   *
   * <code>double w = 4 [json_name = "w"];</code>
   * @return The w.
   */
  @java.lang.Override
  public double getW() {
    return w_;
  }
  /**
   * <pre>
   * The scalar component.
   * </pre>
   *
   * <code>double w = 4 [json_name = "w"];</code>
   * @param value The w to set.
   */
  private void setW(double value) {
    
    w_ = value;
  }
  /**
   * <pre>
   * The scalar component.
   * </pre>
   *
   * <code>double w = 4 [json_name = "w"];</code>
   */
  private void clearW() {

    w_ = 0D;
  }

  public static com.google.type.Quaternion parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.Quaternion parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.Quaternion parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.Quaternion parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.Quaternion parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.type.Quaternion parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.type.Quaternion parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.type.Quaternion parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.type.Quaternion parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.type.Quaternion parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.type.Quaternion parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.type.Quaternion parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.type.Quaternion prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * A quaternion is defined as the quotient of two directed lines in a
   * three-dimensional space or equivalently as the quotient of two Euclidean
   * vectors (https://en.wikipedia.org/wiki/Quaternion).
   *
   * Quaternions are often used in calculations involving three-dimensional
   * rotations (https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation),
   * as they provide greater mathematical robustness by avoiding the gimbal lock
   * problems that can be encountered when using Euler angles
   * (https://en.wikipedia.org/wiki/Gimbal_lock).
   *
   * Quaternions are generally represented in this form:
   *
   * w + xi + yj + zk
   *
   * where x, y, z, and w are real numbers, and i, j, and k are three imaginary
   * numbers.
   *
   * Our naming choice `(x, y, z, w)` comes from the desire to avoid confusion for
   * those interested in the geometric properties of the quaternion in the 3D
   * Cartesian space. Other texts often use alternative names or subscripts, such
   * as `(a, b, c, d)`, `(1, i, j, k)`, or `(0, 1, 2, 3)`, which are perhaps
   * better suited for mathematical interpretations.
   *
   * To avoid any confusion, as well as to maintain compatibility with a large
   * number of software libraries, the quaternions represented using the protocol
   * buffer below *must* follow the Hamilton convention, which defines `ij = k`
   * (i.e. a right-handed algebra), and therefore:
   *
   * i^2 = j^2 = k^2 = ijk = −1
   * ij = −ji = k
   * jk = −kj = i
   * ki = −ik = j
   *
   * Please DO NOT use this to represent quaternions that follow the JPL
   * convention, or any of the other quaternion flavors out there.
   *
   * Definitions:
   *
   * - Quaternion norm (or magnitude): `sqrt(x^2 + y^2 + z^2 + w^2)`.
   * - Unit (or normalized) quaternion: a quaternion whose norm is 1.
   * - Pure quaternion: a quaternion whose scalar component (`w`) is 0.
   * - Rotation quaternion: a unit quaternion used to represent rotation.
   * - Orientation quaternion: a unit quaternion used to represent orientation.
   *
   * A quaternion can be normalized by dividing it by its norm. The resulting
   * quaternion maintains the same direction, but has a norm of 1, i.e. it moves
   * on the unit sphere. This is generally necessary for rotation and orientation
   * quaternions, to avoid rounding errors:
   * https://en.wikipedia.org/wiki/Rotation_formalisms_in_three_dimensions
   *
   * Note that `(x, y, z, w)` and `(-x, -y, -z, -w)` represent the same rotation,
   * but normalization would be even more useful, e.g. for comparison purposes, if
   * it would produce a unique representation. It is thus recommended that `w` be
   * kept positive, which can be achieved by changing all the signs when `w` is
   * negative.
   * </pre>
   *
   * Protobuf type {@code google.type.Quaternion}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.type.Quaternion, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.type.Quaternion)
      com.google.type.QuaternionOrBuilder {
    // Construct using com.google.type.Quaternion.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The x component.
     * </pre>
     *
     * <code>double x = 1 [json_name = "x"];</code>
     * @return The x.
     */
    @java.lang.Override
    public double getX() {
      return instance.getX();
    }
    /**
     * <pre>
     * The x component.
     * </pre>
     *
     * <code>double x = 1 [json_name = "x"];</code>
     * @param value The x to set.
     * @return This builder for chaining.
     */
    public Builder setX(double value) {
      copyOnWrite();
      instance.setX(value);
      return this;
    }
    /**
     * <pre>
     * The x component.
     * </pre>
     *
     * <code>double x = 1 [json_name = "x"];</code>
     * @return This builder for chaining.
     */
    public Builder clearX() {
      copyOnWrite();
      instance.clearX();
      return this;
    }

    /**
     * <pre>
     * The y component.
     * </pre>
     *
     * <code>double y = 2 [json_name = "y"];</code>
     * @return The y.
     */
    @java.lang.Override
    public double getY() {
      return instance.getY();
    }
    /**
     * <pre>
     * The y component.
     * </pre>
     *
     * <code>double y = 2 [json_name = "y"];</code>
     * @param value The y to set.
     * @return This builder for chaining.
     */
    public Builder setY(double value) {
      copyOnWrite();
      instance.setY(value);
      return this;
    }
    /**
     * <pre>
     * The y component.
     * </pre>
     *
     * <code>double y = 2 [json_name = "y"];</code>
     * @return This builder for chaining.
     */
    public Builder clearY() {
      copyOnWrite();
      instance.clearY();
      return this;
    }

    /**
     * <pre>
     * The z component.
     * </pre>
     *
     * <code>double z = 3 [json_name = "z"];</code>
     * @return The z.
     */
    @java.lang.Override
    public double getZ() {
      return instance.getZ();
    }
    /**
     * <pre>
     * The z component.
     * </pre>
     *
     * <code>double z = 3 [json_name = "z"];</code>
     * @param value The z to set.
     * @return This builder for chaining.
     */
    public Builder setZ(double value) {
      copyOnWrite();
      instance.setZ(value);
      return this;
    }
    /**
     * <pre>
     * The z component.
     * </pre>
     *
     * <code>double z = 3 [json_name = "z"];</code>
     * @return This builder for chaining.
     */
    public Builder clearZ() {
      copyOnWrite();
      instance.clearZ();
      return this;
    }

    /**
     * <pre>
     * The scalar component.
     * </pre>
     *
     * <code>double w = 4 [json_name = "w"];</code>
     * @return The w.
     */
    @java.lang.Override
    public double getW() {
      return instance.getW();
    }
    /**
     * <pre>
     * The scalar component.
     * </pre>
     *
     * <code>double w = 4 [json_name = "w"];</code>
     * @param value The w to set.
     * @return This builder for chaining.
     */
    public Builder setW(double value) {
      copyOnWrite();
      instance.setW(value);
      return this;
    }
    /**
     * <pre>
     * The scalar component.
     * </pre>
     *
     * <code>double w = 4 [json_name = "w"];</code>
     * @return This builder for chaining.
     */
    public Builder clearW() {
      copyOnWrite();
      instance.clearW();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.type.Quaternion)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.type.Quaternion();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "x_",
            "y_",
            "z_",
            "w_",
          };
          java.lang.String info =
              "\u0000\u0004\u0000\u0000\u0001\u0004\u0004\u0000\u0000\u0000\u0001\u0000\u0002\u0000" +
              "\u0003\u0000\u0004\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.type.Quaternion> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.type.Quaternion.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.type.Quaternion>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.type.Quaternion)
  private static final com.google.type.Quaternion DEFAULT_INSTANCE;
  static {
    Quaternion defaultInstance = new Quaternion();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      Quaternion.class, defaultInstance);
  }

  public static com.google.type.Quaternion getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Quaternion> PARSER;

  public static com.google.protobuf.Parser<Quaternion> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

