// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/expr/v1alpha1/checked.proto

// Protobuf Java Version: 3.25.2
package com.google.api.expr.v1alpha1;

/**
 * <pre>
 * Represents a declaration of a named value or function.
 *
 * A declaration is part of the contract between the expression, the agent
 * evaluating that expression, and the caller requesting evaluation.
 * </pre>
 *
 * Protobuf type {@code google.api.expr.v1alpha1.Decl}
 */
public  final class Decl extends
    com.google.protobuf.GeneratedMessageLite<
        Decl, Decl.Builder> implements
    // @@protoc_insertion_point(message_implements:google.api.expr.v1alpha1.Decl)
    DeclOrBuilder {
  private Decl() {
    name_ = "";
  }
  public interface IdentDeclOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.api.expr.v1alpha1.Decl.IdentDecl)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Required. The type of the identifier.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <pre>
     * Required. The type of the identifier.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];</code>
     * @return The type.
     */
    com.google.api.expr.v1alpha1.Type getType();

    /**
     * <pre>
     * The constant value of the identifier. If not specified, the identifier
     * must be supplied at evaluation time.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];</code>
     * @return Whether the value field is set.
     */
    boolean hasValue();
    /**
     * <pre>
     * The constant value of the identifier. If not specified, the identifier
     * must be supplied at evaluation time.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];</code>
     * @return The value.
     */
    com.google.api.expr.v1alpha1.Constant getValue();

    /**
     * <pre>
     * Documentation string for the identifier.
     * </pre>
     *
     * <code>string doc = 3 [json_name = "doc"];</code>
     * @return The doc.
     */
    java.lang.String getDoc();
    /**
     * <pre>
     * Documentation string for the identifier.
     * </pre>
     *
     * <code>string doc = 3 [json_name = "doc"];</code>
     * @return The bytes for doc.
     */
    com.google.protobuf.ByteString
        getDocBytes();
  }
  /**
   * <pre>
   * Identifier declaration which specifies its type and optional `Expr` value.
   *
   * An identifier without a value is a declaration that must be provided at
   * evaluation time. An identifier with a value should resolve to a constant,
   * but may be used in conjunction with other identifiers bound at evaluation
   * time.
   * </pre>
   *
   * Protobuf type {@code google.api.expr.v1alpha1.Decl.IdentDecl}
   */
  public  static final class IdentDecl extends
      com.google.protobuf.GeneratedMessageLite<
          IdentDecl, IdentDecl.Builder> implements
      // @@protoc_insertion_point(message_implements:google.api.expr.v1alpha1.Decl.IdentDecl)
      IdentDeclOrBuilder {
    private IdentDecl() {
      doc_ = "";
    }
    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private com.google.api.expr.v1alpha1.Type type_;
    /**
     * <pre>
     * Required. The type of the identifier.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];</code>
     */
    @java.lang.Override
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Required. The type of the identifier.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];</code>
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.Type getType() {
      return type_ == null ? com.google.api.expr.v1alpha1.Type.getDefaultInstance() : type_;
    }
    /**
     * <pre>
     * Required. The type of the identifier.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];</code>
     */
    private void setType(com.google.api.expr.v1alpha1.Type value) {
      value.getClass();
  type_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * Required. The type of the identifier.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeType(com.google.api.expr.v1alpha1.Type value) {
      value.getClass();
  if (type_ != null &&
          type_ != com.google.api.expr.v1alpha1.Type.getDefaultInstance()) {
        type_ =
          com.google.api.expr.v1alpha1.Type.newBuilder(type_).mergeFrom(value).buildPartial();
      } else {
        type_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Required. The type of the identifier.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];</code>
     */
    private void clearType() {  type_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private com.google.api.expr.v1alpha1.Constant value_;
    /**
     * <pre>
     * The constant value of the identifier. If not specified, the identifier
     * must be supplied at evaluation time.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];</code>
     */
    @java.lang.Override
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The constant value of the identifier. If not specified, the identifier
     * must be supplied at evaluation time.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];</code>
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.Constant getValue() {
      return value_ == null ? com.google.api.expr.v1alpha1.Constant.getDefaultInstance() : value_;
    }
    /**
     * <pre>
     * The constant value of the identifier. If not specified, the identifier
     * must be supplied at evaluation time.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];</code>
     */
    private void setValue(com.google.api.expr.v1alpha1.Constant value) {
      value.getClass();
  value_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * The constant value of the identifier. If not specified, the identifier
     * must be supplied at evaluation time.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeValue(com.google.api.expr.v1alpha1.Constant value) {
      value.getClass();
  if (value_ != null &&
          value_ != com.google.api.expr.v1alpha1.Constant.getDefaultInstance()) {
        value_ =
          com.google.api.expr.v1alpha1.Constant.newBuilder(value_).mergeFrom(value).buildPartial();
      } else {
        value_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * The constant value of the identifier. If not specified, the identifier
     * must be supplied at evaluation time.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];</code>
     */
    private void clearValue() {  value_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int DOC_FIELD_NUMBER = 3;
    private java.lang.String doc_;
    /**
     * <pre>
     * Documentation string for the identifier.
     * </pre>
     *
     * <code>string doc = 3 [json_name = "doc"];</code>
     * @return The doc.
     */
    @java.lang.Override
    public java.lang.String getDoc() {
      return doc_;
    }
    /**
     * <pre>
     * Documentation string for the identifier.
     * </pre>
     *
     * <code>string doc = 3 [json_name = "doc"];</code>
     * @return The bytes for doc.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDocBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(doc_);
    }
    /**
     * <pre>
     * Documentation string for the identifier.
     * </pre>
     *
     * <code>string doc = 3 [json_name = "doc"];</code>
     * @param value The doc to set.
     */
    private void setDoc(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      doc_ = value;
    }
    /**
     * <pre>
     * Documentation string for the identifier.
     * </pre>
     *
     * <code>string doc = 3 [json_name = "doc"];</code>
     */
    private void clearDoc() {

      doc_ = getDefaultInstance().getDoc();
    }
    /**
     * <pre>
     * Documentation string for the identifier.
     * </pre>
     *
     * <code>string doc = 3 [json_name = "doc"];</code>
     * @param value The bytes for doc to set.
     */
    private void setDocBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      doc_ = value.toStringUtf8();

    }

    public static com.google.api.expr.v1alpha1.Decl.IdentDecl parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.api.expr.v1alpha1.Decl.IdentDecl parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.api.expr.v1alpha1.Decl.IdentDecl parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.api.expr.v1alpha1.Decl.IdentDecl parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.api.expr.v1alpha1.Decl.IdentDecl parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.api.expr.v1alpha1.Decl.IdentDecl parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.api.expr.v1alpha1.Decl.IdentDecl parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.api.expr.v1alpha1.Decl.IdentDecl parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static com.google.api.expr.v1alpha1.Decl.IdentDecl parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static com.google.api.expr.v1alpha1.Decl.IdentDecl parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.api.expr.v1alpha1.Decl.IdentDecl parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.api.expr.v1alpha1.Decl.IdentDecl parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.api.expr.v1alpha1.Decl.IdentDecl prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Identifier declaration which specifies its type and optional `Expr` value.
     *
     * An identifier without a value is a declaration that must be provided at
     * evaluation time. An identifier with a value should resolve to a constant,
     * but may be used in conjunction with other identifiers bound at evaluation
     * time.
     * </pre>
     *
     * Protobuf type {@code google.api.expr.v1alpha1.Decl.IdentDecl}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.api.expr.v1alpha1.Decl.IdentDecl, Builder> implements
        // @@protoc_insertion_point(builder_implements:google.api.expr.v1alpha1.Decl.IdentDecl)
        com.google.api.expr.v1alpha1.Decl.IdentDeclOrBuilder {
      // Construct using com.google.api.expr.v1alpha1.Decl.IdentDecl.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Required. The type of the identifier.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];</code>
       */
      @java.lang.Override
      public boolean hasType() {
        return instance.hasType();
      }
      /**
       * <pre>
       * Required. The type of the identifier.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];</code>
       */
      @java.lang.Override
      public com.google.api.expr.v1alpha1.Type getType() {
        return instance.getType();
      }
      /**
       * <pre>
       * Required. The type of the identifier.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];</code>
       */
      public Builder setType(com.google.api.expr.v1alpha1.Type value) {
        copyOnWrite();
        instance.setType(value);
        return this;
        }
      /**
       * <pre>
       * Required. The type of the identifier.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];</code>
       */
      public Builder setType(
          com.google.api.expr.v1alpha1.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setType(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Required. The type of the identifier.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];</code>
       */
      public Builder mergeType(com.google.api.expr.v1alpha1.Type value) {
        copyOnWrite();
        instance.mergeType(value);
        return this;
      }
      /**
       * <pre>
       * Required. The type of the identifier.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];</code>
       */
      public Builder clearType() {  copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <pre>
       * The constant value of the identifier. If not specified, the identifier
       * must be supplied at evaluation time.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];</code>
       */
      @java.lang.Override
      public boolean hasValue() {
        return instance.hasValue();
      }
      /**
       * <pre>
       * The constant value of the identifier. If not specified, the identifier
       * must be supplied at evaluation time.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];</code>
       */
      @java.lang.Override
      public com.google.api.expr.v1alpha1.Constant getValue() {
        return instance.getValue();
      }
      /**
       * <pre>
       * The constant value of the identifier. If not specified, the identifier
       * must be supplied at evaluation time.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];</code>
       */
      public Builder setValue(com.google.api.expr.v1alpha1.Constant value) {
        copyOnWrite();
        instance.setValue(value);
        return this;
        }
      /**
       * <pre>
       * The constant value of the identifier. If not specified, the identifier
       * must be supplied at evaluation time.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];</code>
       */
      public Builder setValue(
          com.google.api.expr.v1alpha1.Constant.Builder builderForValue) {
        copyOnWrite();
        instance.setValue(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The constant value of the identifier. If not specified, the identifier
       * must be supplied at evaluation time.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];</code>
       */
      public Builder mergeValue(com.google.api.expr.v1alpha1.Constant value) {
        copyOnWrite();
        instance.mergeValue(value);
        return this;
      }
      /**
       * <pre>
       * The constant value of the identifier. If not specified, the identifier
       * must be supplied at evaluation time.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];</code>
       */
      public Builder clearValue() {  copyOnWrite();
        instance.clearValue();
        return this;
      }

      /**
       * <pre>
       * Documentation string for the identifier.
       * </pre>
       *
       * <code>string doc = 3 [json_name = "doc"];</code>
       * @return The doc.
       */
      @java.lang.Override
      public java.lang.String getDoc() {
        return instance.getDoc();
      }
      /**
       * <pre>
       * Documentation string for the identifier.
       * </pre>
       *
       * <code>string doc = 3 [json_name = "doc"];</code>
       * @return The bytes for doc.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getDocBytes() {
        return instance.getDocBytes();
      }
      /**
       * <pre>
       * Documentation string for the identifier.
       * </pre>
       *
       * <code>string doc = 3 [json_name = "doc"];</code>
       * @param value The doc to set.
       * @return This builder for chaining.
       */
      public Builder setDoc(
          java.lang.String value) {
        copyOnWrite();
        instance.setDoc(value);
        return this;
      }
      /**
       * <pre>
       * Documentation string for the identifier.
       * </pre>
       *
       * <code>string doc = 3 [json_name = "doc"];</code>
       * @return This builder for chaining.
       */
      public Builder clearDoc() {
        copyOnWrite();
        instance.clearDoc();
        return this;
      }
      /**
       * <pre>
       * Documentation string for the identifier.
       * </pre>
       *
       * <code>string doc = 3 [json_name = "doc"];</code>
       * @param value The bytes for doc to set.
       * @return This builder for chaining.
       */
      public Builder setDocBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDocBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:google.api.expr.v1alpha1.Decl.IdentDecl)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.api.expr.v1alpha1.Decl.IdentDecl();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "type_",
              "value_",
              "doc_",
            };
            java.lang.String info =
                "\u0000\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
                "\u1009\u0001\u0003\u0208";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.api.expr.v1alpha1.Decl.IdentDecl> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.api.expr.v1alpha1.Decl.IdentDecl.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.api.expr.v1alpha1.Decl.IdentDecl>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl.IdentDecl)
    private static final com.google.api.expr.v1alpha1.Decl.IdentDecl DEFAULT_INSTANCE;
    static {
      IdentDecl defaultInstance = new IdentDecl();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        IdentDecl.class, defaultInstance);
    }

    public static com.google.api.expr.v1alpha1.Decl.IdentDecl getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<IdentDecl> PARSER;

    public static com.google.protobuf.Parser<IdentDecl> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface FunctionDeclOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.api.expr.v1alpha1.Decl.FunctionDecl)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Required. List of function overloads, must contain at least one overload.
     * </pre>
     *
     * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
     */
    java.util.List<com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload> 
        getOverloadsList();
    /**
     * <pre>
     * Required. List of function overloads, must contain at least one overload.
     * </pre>
     *
     * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
     */
    com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload getOverloads(int index);
    /**
     * <pre>
     * Required. List of function overloads, must contain at least one overload.
     * </pre>
     *
     * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
     */
    int getOverloadsCount();
  }
  /**
   * <pre>
   * Function declaration specifies one or more overloads which indicate the
   * function's parameter types and return type.
   *
   * Functions have no observable side-effects (there may be side-effects like
   * logging which are not observable from CEL).
   * </pre>
   *
   * Protobuf type {@code google.api.expr.v1alpha1.Decl.FunctionDecl}
   */
  public  static final class FunctionDecl extends
      com.google.protobuf.GeneratedMessageLite<
          FunctionDecl, FunctionDecl.Builder> implements
      // @@protoc_insertion_point(message_implements:google.api.expr.v1alpha1.Decl.FunctionDecl)
      FunctionDeclOrBuilder {
    private FunctionDecl() {
      overloads_ = emptyProtobufList();
    }
    public interface OverloadOrBuilder extends
        // @@protoc_insertion_point(interface_extends:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Required. Globally unique overload name of the function which reflects
       * the function name and argument types.
       *
       * This will be used by a [Reference][google.api.expr.v1alpha1.Reference]
       * to indicate the `overload_id` that was resolved for the function
       * `name`.
       * </pre>
       *
       * <code>string overload_id = 1 [json_name = "overloadId"];</code>
       * @return The overloadId.
       */
      java.lang.String getOverloadId();
      /**
       * <pre>
       * Required. Globally unique overload name of the function which reflects
       * the function name and argument types.
       *
       * This will be used by a [Reference][google.api.expr.v1alpha1.Reference]
       * to indicate the `overload_id` that was resolved for the function
       * `name`.
       * </pre>
       *
       * <code>string overload_id = 1 [json_name = "overloadId"];</code>
       * @return The bytes for overloadId.
       */
      com.google.protobuf.ByteString
          getOverloadIdBytes();

      /**
       * <pre>
       * List of function parameter [Type][google.api.expr.v1alpha1.Type]
       * values.
       *
       * Param types are disjoint after generic type parameters have been
       * replaced with the type `DYN`. Since the `DYN` type is compatible with
       * any other type, this means that if `A` is a type parameter, the
       * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
       * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
       *
       * When the `result_type` of a function is a generic type param, the
       * type param name also appears as the `type` of on at least one params.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
       */
      java.util.List<com.google.api.expr.v1alpha1.Type> 
          getParamsList();
      /**
       * <pre>
       * List of function parameter [Type][google.api.expr.v1alpha1.Type]
       * values.
       *
       * Param types are disjoint after generic type parameters have been
       * replaced with the type `DYN`. Since the `DYN` type is compatible with
       * any other type, this means that if `A` is a type parameter, the
       * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
       * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
       *
       * When the `result_type` of a function is a generic type param, the
       * type param name also appears as the `type` of on at least one params.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
       */
      com.google.api.expr.v1alpha1.Type getParams(int index);
      /**
       * <pre>
       * List of function parameter [Type][google.api.expr.v1alpha1.Type]
       * values.
       *
       * Param types are disjoint after generic type parameters have been
       * replaced with the type `DYN`. Since the `DYN` type is compatible with
       * any other type, this means that if `A` is a type parameter, the
       * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
       * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
       *
       * When the `result_type` of a function is a generic type param, the
       * type param name also appears as the `type` of on at least one params.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
       */
      int getParamsCount();

      /**
       * <pre>
       * The type param names associated with the function declaration.
       *
       * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
       * the type params of `K, V`.
       * </pre>
       *
       * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
       * @return A list containing the typeParams.
       */
      java.util.List<java.lang.String>
          getTypeParamsList();
      /**
       * <pre>
       * The type param names associated with the function declaration.
       *
       * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
       * the type params of `K, V`.
       * </pre>
       *
       * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
       * @return The count of typeParams.
       */
      int getTypeParamsCount();
      /**
       * <pre>
       * The type param names associated with the function declaration.
       *
       * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
       * the type params of `K, V`.
       * </pre>
       *
       * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
       * @param index The index of the element to return.
       * @return The typeParams at the given index.
       */
      java.lang.String getTypeParams(int index);
      /**
       * <pre>
       * The type param names associated with the function declaration.
       *
       * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
       * the type params of `K, V`.
       * </pre>
       *
       * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
       * @param index The index of the element to return.
       * @return The typeParams at the given index.
       */
      com.google.protobuf.ByteString
          getTypeParamsBytes(int index);

      /**
       * <pre>
       * Required. The result type of the function. For example, the operator
       * `string.isEmpty()` would have `result_type` of `kind: BOOL`.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];</code>
       * @return Whether the resultType field is set.
       */
      boolean hasResultType();
      /**
       * <pre>
       * Required. The result type of the function. For example, the operator
       * `string.isEmpty()` would have `result_type` of `kind: BOOL`.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];</code>
       * @return The resultType.
       */
      com.google.api.expr.v1alpha1.Type getResultType();

      /**
       * <pre>
       * Whether the function is to be used in a method call-style `x.f(...)`
       * or a function call-style `f(x, ...)`.
       *
       * For methods, the first parameter declaration, `params[0]` is the
       * expected type of the target receiver.
       * </pre>
       *
       * <code>bool is_instance_function = 5 [json_name = "isInstanceFunction"];</code>
       * @return The isInstanceFunction.
       */
      boolean getIsInstanceFunction();

      /**
       * <pre>
       * Documentation string for the overload.
       * </pre>
       *
       * <code>string doc = 6 [json_name = "doc"];</code>
       * @return The doc.
       */
      java.lang.String getDoc();
      /**
       * <pre>
       * Documentation string for the overload.
       * </pre>
       *
       * <code>string doc = 6 [json_name = "doc"];</code>
       * @return The bytes for doc.
       */
      com.google.protobuf.ByteString
          getDocBytes();
    }
    /**
     * <pre>
     * An overload indicates a function's parameter types and return type, and
     * may optionally include a function body described in terms of
     * [Expr][google.api.expr.v1alpha1.Expr] values.
     *
     * Functions overloads are declared in either a function or method
     * call-style. For methods, the `params[0]` is the expected type of the
     * target receiver.
     *
     * Overloads must have non-overlapping argument types after erasure of all
     * parameterized type variables (similar as type erasure in Java).
     * </pre>
     *
     * Protobuf type {@code google.api.expr.v1alpha1.Decl.FunctionDecl.Overload}
     */
    public  static final class Overload extends
        com.google.protobuf.GeneratedMessageLite<
            Overload, Overload.Builder> implements
        // @@protoc_insertion_point(message_implements:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
        OverloadOrBuilder {
      private Overload() {
        overloadId_ = "";
        params_ = emptyProtobufList();
        typeParams_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
        doc_ = "";
      }
      private int bitField0_;
      public static final int OVERLOAD_ID_FIELD_NUMBER = 1;
      private java.lang.String overloadId_;
      /**
       * <pre>
       * Required. Globally unique overload name of the function which reflects
       * the function name and argument types.
       *
       * This will be used by a [Reference][google.api.expr.v1alpha1.Reference]
       * to indicate the `overload_id` that was resolved for the function
       * `name`.
       * </pre>
       *
       * <code>string overload_id = 1 [json_name = "overloadId"];</code>
       * @return The overloadId.
       */
      @java.lang.Override
      public java.lang.String getOverloadId() {
        return overloadId_;
      }
      /**
       * <pre>
       * Required. Globally unique overload name of the function which reflects
       * the function name and argument types.
       *
       * This will be used by a [Reference][google.api.expr.v1alpha1.Reference]
       * to indicate the `overload_id` that was resolved for the function
       * `name`.
       * </pre>
       *
       * <code>string overload_id = 1 [json_name = "overloadId"];</code>
       * @return The bytes for overloadId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getOverloadIdBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(overloadId_);
      }
      /**
       * <pre>
       * Required. Globally unique overload name of the function which reflects
       * the function name and argument types.
       *
       * This will be used by a [Reference][google.api.expr.v1alpha1.Reference]
       * to indicate the `overload_id` that was resolved for the function
       * `name`.
       * </pre>
       *
       * <code>string overload_id = 1 [json_name = "overloadId"];</code>
       * @param value The overloadId to set.
       */
      private void setOverloadId(
          java.lang.String value) {
        java.lang.Class<?> valueClass = value.getClass();
  
        overloadId_ = value;
      }
      /**
       * <pre>
       * Required. Globally unique overload name of the function which reflects
       * the function name and argument types.
       *
       * This will be used by a [Reference][google.api.expr.v1alpha1.Reference]
       * to indicate the `overload_id` that was resolved for the function
       * `name`.
       * </pre>
       *
       * <code>string overload_id = 1 [json_name = "overloadId"];</code>
       */
      private void clearOverloadId() {

        overloadId_ = getDefaultInstance().getOverloadId();
      }
      /**
       * <pre>
       * Required. Globally unique overload name of the function which reflects
       * the function name and argument types.
       *
       * This will be used by a [Reference][google.api.expr.v1alpha1.Reference]
       * to indicate the `overload_id` that was resolved for the function
       * `name`.
       * </pre>
       *
       * <code>string overload_id = 1 [json_name = "overloadId"];</code>
       * @param value The bytes for overloadId to set.
       */
      private void setOverloadIdBytes(
          com.google.protobuf.ByteString value) {
        checkByteStringIsUtf8(value);
        overloadId_ = value.toStringUtf8();

      }

      public static final int PARAMS_FIELD_NUMBER = 2;
      private com.google.protobuf.Internal.ProtobufList<com.google.api.expr.v1alpha1.Type> params_;
      /**
       * <pre>
       * List of function parameter [Type][google.api.expr.v1alpha1.Type]
       * values.
       *
       * Param types are disjoint after generic type parameters have been
       * replaced with the type `DYN`. Since the `DYN` type is compatible with
       * any other type, this means that if `A` is a type parameter, the
       * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
       * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
       *
       * When the `result_type` of a function is a generic type param, the
       * type param name also appears as the `type` of on at least one params.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
       */
      @java.lang.Override
      public java.util.List<com.google.api.expr.v1alpha1.Type> getParamsList() {
        return params_;
      }
      /**
       * <pre>
       * List of function parameter [Type][google.api.expr.v1alpha1.Type]
       * values.
       *
       * Param types are disjoint after generic type parameters have been
       * replaced with the type `DYN`. Since the `DYN` type is compatible with
       * any other type, this means that if `A` is a type parameter, the
       * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
       * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
       *
       * When the `result_type` of a function is a generic type param, the
       * type param name also appears as the `type` of on at least one params.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
       */
      public java.util.List<? extends com.google.api.expr.v1alpha1.TypeOrBuilder> 
          getParamsOrBuilderList() {
        return params_;
      }
      /**
       * <pre>
       * List of function parameter [Type][google.api.expr.v1alpha1.Type]
       * values.
       *
       * Param types are disjoint after generic type parameters have been
       * replaced with the type `DYN`. Since the `DYN` type is compatible with
       * any other type, this means that if `A` is a type parameter, the
       * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
       * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
       *
       * When the `result_type` of a function is a generic type param, the
       * type param name also appears as the `type` of on at least one params.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
       */
      @java.lang.Override
      public int getParamsCount() {
        return params_.size();
      }
      /**
       * <pre>
       * List of function parameter [Type][google.api.expr.v1alpha1.Type]
       * values.
       *
       * Param types are disjoint after generic type parameters have been
       * replaced with the type `DYN`. Since the `DYN` type is compatible with
       * any other type, this means that if `A` is a type parameter, the
       * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
       * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
       *
       * When the `result_type` of a function is a generic type param, the
       * type param name also appears as the `type` of on at least one params.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
       */
      @java.lang.Override
      public com.google.api.expr.v1alpha1.Type getParams(int index) {
        return params_.get(index);
      }
      /**
       * <pre>
       * List of function parameter [Type][google.api.expr.v1alpha1.Type]
       * values.
       *
       * Param types are disjoint after generic type parameters have been
       * replaced with the type `DYN`. Since the `DYN` type is compatible with
       * any other type, this means that if `A` is a type parameter, the
       * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
       * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
       *
       * When the `result_type` of a function is a generic type param, the
       * type param name also appears as the `type` of on at least one params.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
       */
      public com.google.api.expr.v1alpha1.TypeOrBuilder getParamsOrBuilder(
          int index) {
        return params_.get(index);
      }
      private void ensureParamsIsMutable() {
        com.google.protobuf.Internal.ProtobufList<com.google.api.expr.v1alpha1.Type> tmp = params_;
        if (!tmp.isModifiable()) {
          params_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
         }
      }

      /**
       * <pre>
       * List of function parameter [Type][google.api.expr.v1alpha1.Type]
       * values.
       *
       * Param types are disjoint after generic type parameters have been
       * replaced with the type `DYN`. Since the `DYN` type is compatible with
       * any other type, this means that if `A` is a type parameter, the
       * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
       * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
       *
       * When the `result_type` of a function is a generic type param, the
       * type param name also appears as the `type` of on at least one params.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
       */
      private void setParams(
          int index, com.google.api.expr.v1alpha1.Type value) {
        value.getClass();
  ensureParamsIsMutable();
        params_.set(index, value);
      }
      /**
       * <pre>
       * List of function parameter [Type][google.api.expr.v1alpha1.Type]
       * values.
       *
       * Param types are disjoint after generic type parameters have been
       * replaced with the type `DYN`. Since the `DYN` type is compatible with
       * any other type, this means that if `A` is a type parameter, the
       * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
       * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
       *
       * When the `result_type` of a function is a generic type param, the
       * type param name also appears as the `type` of on at least one params.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
       */
      private void addParams(com.google.api.expr.v1alpha1.Type value) {
        value.getClass();
  ensureParamsIsMutable();
        params_.add(value);
      }
      /**
       * <pre>
       * List of function parameter [Type][google.api.expr.v1alpha1.Type]
       * values.
       *
       * Param types are disjoint after generic type parameters have been
       * replaced with the type `DYN`. Since the `DYN` type is compatible with
       * any other type, this means that if `A` is a type parameter, the
       * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
       * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
       *
       * When the `result_type` of a function is a generic type param, the
       * type param name also appears as the `type` of on at least one params.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
       */
      private void addParams(
          int index, com.google.api.expr.v1alpha1.Type value) {
        value.getClass();
  ensureParamsIsMutable();
        params_.add(index, value);
      }
      /**
       * <pre>
       * List of function parameter [Type][google.api.expr.v1alpha1.Type]
       * values.
       *
       * Param types are disjoint after generic type parameters have been
       * replaced with the type `DYN`. Since the `DYN` type is compatible with
       * any other type, this means that if `A` is a type parameter, the
       * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
       * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
       *
       * When the `result_type` of a function is a generic type param, the
       * type param name also appears as the `type` of on at least one params.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
       */
      private void addAllParams(
          java.lang.Iterable<? extends com.google.api.expr.v1alpha1.Type> values) {
        ensureParamsIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, params_);
      }
      /**
       * <pre>
       * List of function parameter [Type][google.api.expr.v1alpha1.Type]
       * values.
       *
       * Param types are disjoint after generic type parameters have been
       * replaced with the type `DYN`. Since the `DYN` type is compatible with
       * any other type, this means that if `A` is a type parameter, the
       * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
       * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
       *
       * When the `result_type` of a function is a generic type param, the
       * type param name also appears as the `type` of on at least one params.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
       */
      private void clearParams() {
        params_ = emptyProtobufList();
      }
      /**
       * <pre>
       * List of function parameter [Type][google.api.expr.v1alpha1.Type]
       * values.
       *
       * Param types are disjoint after generic type parameters have been
       * replaced with the type `DYN`. Since the `DYN` type is compatible with
       * any other type, this means that if `A` is a type parameter, the
       * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
       * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
       *
       * When the `result_type` of a function is a generic type param, the
       * type param name also appears as the `type` of on at least one params.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
       */
      private void removeParams(int index) {
        ensureParamsIsMutable();
        params_.remove(index);
      }

      public static final int TYPE_PARAMS_FIELD_NUMBER = 3;
      private com.google.protobuf.Internal.ProtobufList<java.lang.String> typeParams_;
      /**
       * <pre>
       * The type param names associated with the function declaration.
       *
       * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
       * the type params of `K, V`.
       * </pre>
       *
       * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
       * @return A list containing the typeParams.
       */
      @java.lang.Override
      public java.util.List<java.lang.String> getTypeParamsList() {
        return typeParams_;
      }
      /**
       * <pre>
       * The type param names associated with the function declaration.
       *
       * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
       * the type params of `K, V`.
       * </pre>
       *
       * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
       * @return The count of typeParams.
       */
      @java.lang.Override
      public int getTypeParamsCount() {
        return typeParams_.size();
      }
      /**
       * <pre>
       * The type param names associated with the function declaration.
       *
       * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
       * the type params of `K, V`.
       * </pre>
       *
       * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
       * @param index The index of the element to return.
       * @return The typeParams at the given index.
       */
      @java.lang.Override
      public java.lang.String getTypeParams(int index) {
        return typeParams_.get(index);
      }
      /**
       * <pre>
       * The type param names associated with the function declaration.
       *
       * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
       * the type params of `K, V`.
       * </pre>
       *
       * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
       * @param index The index of the value to return.
       * @return The bytes of the typeParams at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTypeParamsBytes(int index) {
        return com.google.protobuf.ByteString.copyFromUtf8(
            typeParams_.get(index));
      }
      private void ensureTypeParamsIsMutable() {
        com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
            typeParams_;  if (!tmp.isModifiable()) {
          typeParams_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
         }
      }
      /**
       * <pre>
       * The type param names associated with the function declaration.
       *
       * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
       * the type params of `K, V`.
       * </pre>
       *
       * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
       * @param index The index to set the value at.
       * @param value The typeParams to set.
       */
      private void setTypeParams(
          int index, java.lang.String value) {
        java.lang.Class<?> valueClass = value.getClass();
  ensureTypeParamsIsMutable();
        typeParams_.set(index, value);
      }
      /**
       * <pre>
       * The type param names associated with the function declaration.
       *
       * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
       * the type params of `K, V`.
       * </pre>
       *
       * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
       * @param value The typeParams to add.
       */
      private void addTypeParams(
          java.lang.String value) {
        java.lang.Class<?> valueClass = value.getClass();
  ensureTypeParamsIsMutable();
        typeParams_.add(value);
      }
      /**
       * <pre>
       * The type param names associated with the function declaration.
       *
       * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
       * the type params of `K, V`.
       * </pre>
       *
       * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
       * @param values The typeParams to add.
       */
      private void addAllTypeParams(
          java.lang.Iterable<java.lang.String> values) {
        ensureTypeParamsIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, typeParams_);
      }
      /**
       * <pre>
       * The type param names associated with the function declaration.
       *
       * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
       * the type params of `K, V`.
       * </pre>
       *
       * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
       */
      private void clearTypeParams() {
        typeParams_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      }
      /**
       * <pre>
       * The type param names associated with the function declaration.
       *
       * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
       * the type params of `K, V`.
       * </pre>
       *
       * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
       * @param value The bytes of the typeParams to add.
       */
      private void addTypeParamsBytes(
          com.google.protobuf.ByteString value) {
        checkByteStringIsUtf8(value);
        ensureTypeParamsIsMutable();
        typeParams_.add(value.toStringUtf8());
      }

      public static final int RESULT_TYPE_FIELD_NUMBER = 4;
      private com.google.api.expr.v1alpha1.Type resultType_;
      /**
       * <pre>
       * Required. The result type of the function. For example, the operator
       * `string.isEmpty()` would have `result_type` of `kind: BOOL`.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];</code>
       */
      @java.lang.Override
      public boolean hasResultType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Required. The result type of the function. For example, the operator
       * `string.isEmpty()` would have `result_type` of `kind: BOOL`.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];</code>
       */
      @java.lang.Override
      public com.google.api.expr.v1alpha1.Type getResultType() {
        return resultType_ == null ? com.google.api.expr.v1alpha1.Type.getDefaultInstance() : resultType_;
      }
      /**
       * <pre>
       * Required. The result type of the function. For example, the operator
       * `string.isEmpty()` would have `result_type` of `kind: BOOL`.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];</code>
       */
      private void setResultType(com.google.api.expr.v1alpha1.Type value) {
        value.getClass();
  resultType_ = value;
        bitField0_ |= 0x00000001;
        }
      /**
       * <pre>
       * Required. The result type of the function. For example, the operator
       * `string.isEmpty()` would have `result_type` of `kind: BOOL`.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergeResultType(com.google.api.expr.v1alpha1.Type value) {
        value.getClass();
  if (resultType_ != null &&
            resultType_ != com.google.api.expr.v1alpha1.Type.getDefaultInstance()) {
          resultType_ =
            com.google.api.expr.v1alpha1.Type.newBuilder(resultType_).mergeFrom(value).buildPartial();
        } else {
          resultType_ = value;
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * Required. The result type of the function. For example, the operator
       * `string.isEmpty()` would have `result_type` of `kind: BOOL`.
       * </pre>
       *
       * <code>.google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];</code>
       */
      private void clearResultType() {  resultType_ = null;
        bitField0_ = (bitField0_ & ~0x00000001);
      }

      public static final int IS_INSTANCE_FUNCTION_FIELD_NUMBER = 5;
      private boolean isInstanceFunction_;
      /**
       * <pre>
       * Whether the function is to be used in a method call-style `x.f(...)`
       * or a function call-style `f(x, ...)`.
       *
       * For methods, the first parameter declaration, `params[0]` is the
       * expected type of the target receiver.
       * </pre>
       *
       * <code>bool is_instance_function = 5 [json_name = "isInstanceFunction"];</code>
       * @return The isInstanceFunction.
       */
      @java.lang.Override
      public boolean getIsInstanceFunction() {
        return isInstanceFunction_;
      }
      /**
       * <pre>
       * Whether the function is to be used in a method call-style `x.f(...)`
       * or a function call-style `f(x, ...)`.
       *
       * For methods, the first parameter declaration, `params[0]` is the
       * expected type of the target receiver.
       * </pre>
       *
       * <code>bool is_instance_function = 5 [json_name = "isInstanceFunction"];</code>
       * @param value The isInstanceFunction to set.
       */
      private void setIsInstanceFunction(boolean value) {
        
        isInstanceFunction_ = value;
      }
      /**
       * <pre>
       * Whether the function is to be used in a method call-style `x.f(...)`
       * or a function call-style `f(x, ...)`.
       *
       * For methods, the first parameter declaration, `params[0]` is the
       * expected type of the target receiver.
       * </pre>
       *
       * <code>bool is_instance_function = 5 [json_name = "isInstanceFunction"];</code>
       */
      private void clearIsInstanceFunction() {

        isInstanceFunction_ = false;
      }

      public static final int DOC_FIELD_NUMBER = 6;
      private java.lang.String doc_;
      /**
       * <pre>
       * Documentation string for the overload.
       * </pre>
       *
       * <code>string doc = 6 [json_name = "doc"];</code>
       * @return The doc.
       */
      @java.lang.Override
      public java.lang.String getDoc() {
        return doc_;
      }
      /**
       * <pre>
       * Documentation string for the overload.
       * </pre>
       *
       * <code>string doc = 6 [json_name = "doc"];</code>
       * @return The bytes for doc.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getDocBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(doc_);
      }
      /**
       * <pre>
       * Documentation string for the overload.
       * </pre>
       *
       * <code>string doc = 6 [json_name = "doc"];</code>
       * @param value The doc to set.
       */
      private void setDoc(
          java.lang.String value) {
        java.lang.Class<?> valueClass = value.getClass();
  
        doc_ = value;
      }
      /**
       * <pre>
       * Documentation string for the overload.
       * </pre>
       *
       * <code>string doc = 6 [json_name = "doc"];</code>
       */
      private void clearDoc() {

        doc_ = getDefaultInstance().getDoc();
      }
      /**
       * <pre>
       * Documentation string for the overload.
       * </pre>
       *
       * <code>string doc = 6 [json_name = "doc"];</code>
       * @param value The bytes for doc to set.
       */
      private void setDocBytes(
          com.google.protobuf.ByteString value) {
        checkByteStringIsUtf8(value);
        doc_ = value.toStringUtf8();

      }

      public static com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }

      public static com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload prototype) {
        return DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * An overload indicates a function's parameter types and return type, and
       * may optionally include a function body described in terms of
       * [Expr][google.api.expr.v1alpha1.Expr] values.
       *
       * Functions overloads are declared in either a function or method
       * call-style. For methods, the `params[0]` is the expected type of the
       * target receiver.
       *
       * Overloads must have non-overlapping argument types after erasure of all
       * parameterized type variables (similar as type erasure in Java).
       * </pre>
       *
       * Protobuf type {@code google.api.expr.v1alpha1.Decl.FunctionDecl.Overload}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload, Builder> implements
          // @@protoc_insertion_point(builder_implements:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
          com.google.api.expr.v1alpha1.Decl.FunctionDecl.OverloadOrBuilder {
        // Construct using com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Required. Globally unique overload name of the function which reflects
         * the function name and argument types.
         *
         * This will be used by a [Reference][google.api.expr.v1alpha1.Reference]
         * to indicate the `overload_id` that was resolved for the function
         * `name`.
         * </pre>
         *
         * <code>string overload_id = 1 [json_name = "overloadId"];</code>
         * @return The overloadId.
         */
        @java.lang.Override
        public java.lang.String getOverloadId() {
          return instance.getOverloadId();
        }
        /**
         * <pre>
         * Required. Globally unique overload name of the function which reflects
         * the function name and argument types.
         *
         * This will be used by a [Reference][google.api.expr.v1alpha1.Reference]
         * to indicate the `overload_id` that was resolved for the function
         * `name`.
         * </pre>
         *
         * <code>string overload_id = 1 [json_name = "overloadId"];</code>
         * @return The bytes for overloadId.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getOverloadIdBytes() {
          return instance.getOverloadIdBytes();
        }
        /**
         * <pre>
         * Required. Globally unique overload name of the function which reflects
         * the function name and argument types.
         *
         * This will be used by a [Reference][google.api.expr.v1alpha1.Reference]
         * to indicate the `overload_id` that was resolved for the function
         * `name`.
         * </pre>
         *
         * <code>string overload_id = 1 [json_name = "overloadId"];</code>
         * @param value The overloadId to set.
         * @return This builder for chaining.
         */
        public Builder setOverloadId(
            java.lang.String value) {
          copyOnWrite();
          instance.setOverloadId(value);
          return this;
        }
        /**
         * <pre>
         * Required. Globally unique overload name of the function which reflects
         * the function name and argument types.
         *
         * This will be used by a [Reference][google.api.expr.v1alpha1.Reference]
         * to indicate the `overload_id` that was resolved for the function
         * `name`.
         * </pre>
         *
         * <code>string overload_id = 1 [json_name = "overloadId"];</code>
         * @return This builder for chaining.
         */
        public Builder clearOverloadId() {
          copyOnWrite();
          instance.clearOverloadId();
          return this;
        }
        /**
         * <pre>
         * Required. Globally unique overload name of the function which reflects
         * the function name and argument types.
         *
         * This will be used by a [Reference][google.api.expr.v1alpha1.Reference]
         * to indicate the `overload_id` that was resolved for the function
         * `name`.
         * </pre>
         *
         * <code>string overload_id = 1 [json_name = "overloadId"];</code>
         * @param value The bytes for overloadId to set.
         * @return This builder for chaining.
         */
        public Builder setOverloadIdBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setOverloadIdBytes(value);
          return this;
        }

        /**
         * <pre>
         * List of function parameter [Type][google.api.expr.v1alpha1.Type]
         * values.
         *
         * Param types are disjoint after generic type parameters have been
         * replaced with the type `DYN`. Since the `DYN` type is compatible with
         * any other type, this means that if `A` is a type parameter, the
         * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
         * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
         *
         * When the `result_type` of a function is a generic type param, the
         * type param name also appears as the `type` of on at least one params.
         * </pre>
         *
         * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
         */
        @java.lang.Override
        public java.util.List<com.google.api.expr.v1alpha1.Type> getParamsList() {
          return java.util.Collections.unmodifiableList(
              instance.getParamsList());
        }
        /**
         * <pre>
         * List of function parameter [Type][google.api.expr.v1alpha1.Type]
         * values.
         *
         * Param types are disjoint after generic type parameters have been
         * replaced with the type `DYN`. Since the `DYN` type is compatible with
         * any other type, this means that if `A` is a type parameter, the
         * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
         * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
         *
         * When the `result_type` of a function is a generic type param, the
         * type param name also appears as the `type` of on at least one params.
         * </pre>
         *
         * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
         */
        @java.lang.Override
        public int getParamsCount() {
          return instance.getParamsCount();
        }/**
         * <pre>
         * List of function parameter [Type][google.api.expr.v1alpha1.Type]
         * values.
         *
         * Param types are disjoint after generic type parameters have been
         * replaced with the type `DYN`. Since the `DYN` type is compatible with
         * any other type, this means that if `A` is a type parameter, the
         * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
         * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
         *
         * When the `result_type` of a function is a generic type param, the
         * type param name also appears as the `type` of on at least one params.
         * </pre>
         *
         * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
         */
        @java.lang.Override
        public com.google.api.expr.v1alpha1.Type getParams(int index) {
          return instance.getParams(index);
        }
        /**
         * <pre>
         * List of function parameter [Type][google.api.expr.v1alpha1.Type]
         * values.
         *
         * Param types are disjoint after generic type parameters have been
         * replaced with the type `DYN`. Since the `DYN` type is compatible with
         * any other type, this means that if `A` is a type parameter, the
         * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
         * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
         *
         * When the `result_type` of a function is a generic type param, the
         * type param name also appears as the `type` of on at least one params.
         * </pre>
         *
         * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
         */
        public Builder setParams(
            int index, com.google.api.expr.v1alpha1.Type value) {
          copyOnWrite();
          instance.setParams(index, value);
          return this;
        }
        /**
         * <pre>
         * List of function parameter [Type][google.api.expr.v1alpha1.Type]
         * values.
         *
         * Param types are disjoint after generic type parameters have been
         * replaced with the type `DYN`. Since the `DYN` type is compatible with
         * any other type, this means that if `A` is a type parameter, the
         * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
         * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
         *
         * When the `result_type` of a function is a generic type param, the
         * type param name also appears as the `type` of on at least one params.
         * </pre>
         *
         * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
         */
        public Builder setParams(
            int index, com.google.api.expr.v1alpha1.Type.Builder builderForValue) {
          copyOnWrite();
          instance.setParams(index,
              builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * List of function parameter [Type][google.api.expr.v1alpha1.Type]
         * values.
         *
         * Param types are disjoint after generic type parameters have been
         * replaced with the type `DYN`. Since the `DYN` type is compatible with
         * any other type, this means that if `A` is a type parameter, the
         * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
         * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
         *
         * When the `result_type` of a function is a generic type param, the
         * type param name also appears as the `type` of on at least one params.
         * </pre>
         *
         * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
         */
        public Builder addParams(com.google.api.expr.v1alpha1.Type value) {
          copyOnWrite();
          instance.addParams(value);
          return this;
        }
        /**
         * <pre>
         * List of function parameter [Type][google.api.expr.v1alpha1.Type]
         * values.
         *
         * Param types are disjoint after generic type parameters have been
         * replaced with the type `DYN`. Since the `DYN` type is compatible with
         * any other type, this means that if `A` is a type parameter, the
         * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
         * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
         *
         * When the `result_type` of a function is a generic type param, the
         * type param name also appears as the `type` of on at least one params.
         * </pre>
         *
         * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
         */
        public Builder addParams(
            int index, com.google.api.expr.v1alpha1.Type value) {
          copyOnWrite();
          instance.addParams(index, value);
          return this;
        }
        /**
         * <pre>
         * List of function parameter [Type][google.api.expr.v1alpha1.Type]
         * values.
         *
         * Param types are disjoint after generic type parameters have been
         * replaced with the type `DYN`. Since the `DYN` type is compatible with
         * any other type, this means that if `A` is a type parameter, the
         * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
         * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
         *
         * When the `result_type` of a function is a generic type param, the
         * type param name also appears as the `type` of on at least one params.
         * </pre>
         *
         * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
         */
        public Builder addParams(
            com.google.api.expr.v1alpha1.Type.Builder builderForValue) {
          copyOnWrite();
          instance.addParams(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * List of function parameter [Type][google.api.expr.v1alpha1.Type]
         * values.
         *
         * Param types are disjoint after generic type parameters have been
         * replaced with the type `DYN`. Since the `DYN` type is compatible with
         * any other type, this means that if `A` is a type parameter, the
         * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
         * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
         *
         * When the `result_type` of a function is a generic type param, the
         * type param name also appears as the `type` of on at least one params.
         * </pre>
         *
         * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
         */
        public Builder addParams(
            int index, com.google.api.expr.v1alpha1.Type.Builder builderForValue) {
          copyOnWrite();
          instance.addParams(index,
              builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * List of function parameter [Type][google.api.expr.v1alpha1.Type]
         * values.
         *
         * Param types are disjoint after generic type parameters have been
         * replaced with the type `DYN`. Since the `DYN` type is compatible with
         * any other type, this means that if `A` is a type parameter, the
         * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
         * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
         *
         * When the `result_type` of a function is a generic type param, the
         * type param name also appears as the `type` of on at least one params.
         * </pre>
         *
         * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
         */
        public Builder addAllParams(
            java.lang.Iterable<? extends com.google.api.expr.v1alpha1.Type> values) {
          copyOnWrite();
          instance.addAllParams(values);
          return this;
        }
        /**
         * <pre>
         * List of function parameter [Type][google.api.expr.v1alpha1.Type]
         * values.
         *
         * Param types are disjoint after generic type parameters have been
         * replaced with the type `DYN`. Since the `DYN` type is compatible with
         * any other type, this means that if `A` is a type parameter, the
         * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
         * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
         *
         * When the `result_type` of a function is a generic type param, the
         * type param name also appears as the `type` of on at least one params.
         * </pre>
         *
         * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
         */
        public Builder clearParams() {
          copyOnWrite();
          instance.clearParams();
          return this;
        }
        /**
         * <pre>
         * List of function parameter [Type][google.api.expr.v1alpha1.Type]
         * values.
         *
         * Param types are disjoint after generic type parameters have been
         * replaced with the type `DYN`. Since the `DYN` type is compatible with
         * any other type, this means that if `A` is a type parameter, the
         * function types `int&lt;A&gt;` and `int&lt;int&gt;` are not disjoint. Likewise,
         * `map&lt;string, string&gt;` is not disjoint from `map&lt;K, V&gt;`.
         *
         * When the `result_type` of a function is a generic type param, the
         * type param name also appears as the `type` of on at least one params.
         * </pre>
         *
         * <code>repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];</code>
         */
        public Builder removeParams(int index) {
          copyOnWrite();
          instance.removeParams(index);
          return this;
        }

        /**
         * <pre>
         * The type param names associated with the function declaration.
         *
         * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
         * the type params of `K, V`.
         * </pre>
         *
         * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
         * @return A list containing the typeParams.
         */
        @java.lang.Override
        public java.util.List<java.lang.String>
            getTypeParamsList() {
          return java.util.Collections.unmodifiableList(
              instance.getTypeParamsList());
        }
        /**
         * <pre>
         * The type param names associated with the function declaration.
         *
         * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
         * the type params of `K, V`.
         * </pre>
         *
         * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
         * @return The count of typeParams.
         */
        @java.lang.Override
        public int getTypeParamsCount() {
          return instance.getTypeParamsCount();
        }
        /**
         * <pre>
         * The type param names associated with the function declaration.
         *
         * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
         * the type params of `K, V`.
         * </pre>
         *
         * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
         * @param index The index of the element to return.
         * @return The typeParams at the given index.
         */
        @java.lang.Override
        public java.lang.String getTypeParams(int index) {
          return instance.getTypeParams(index);
        }
        /**
         * <pre>
         * The type param names associated with the function declaration.
         *
         * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
         * the type params of `K, V`.
         * </pre>
         *
         * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
         * @param index The index of the value to return.
         * @return The bytes of the typeParams at the given index.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getTypeParamsBytes(int index) {
          return instance.getTypeParamsBytes(index);
        }
        /**
         * <pre>
         * The type param names associated with the function declaration.
         *
         * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
         * the type params of `K, V`.
         * </pre>
         *
         * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
         * @param index The index to set the value at.
         * @param value The typeParams to set.
         * @return This builder for chaining.
         */
        public Builder setTypeParams(
            int index, java.lang.String value) {
          copyOnWrite();
          instance.setTypeParams(index, value);
          return this;
        }
        /**
         * <pre>
         * The type param names associated with the function declaration.
         *
         * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
         * the type params of `K, V`.
         * </pre>
         *
         * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
         * @param value The typeParams to add.
         * @return This builder for chaining.
         */
        public Builder addTypeParams(
            java.lang.String value) {
          copyOnWrite();
          instance.addTypeParams(value);
          return this;
        }
        /**
         * <pre>
         * The type param names associated with the function declaration.
         *
         * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
         * the type params of `K, V`.
         * </pre>
         *
         * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
         * @param values The typeParams to add.
         * @return This builder for chaining.
         */
        public Builder addAllTypeParams(
            java.lang.Iterable<java.lang.String> values) {
          copyOnWrite();
          instance.addAllTypeParams(values);
          return this;
        }
        /**
         * <pre>
         * The type param names associated with the function declaration.
         *
         * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
         * the type params of `K, V`.
         * </pre>
         *
         * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
         * @return This builder for chaining.
         */
        public Builder clearTypeParams() {
          copyOnWrite();
          instance.clearTypeParams();
          return this;
        }
        /**
         * <pre>
         * The type param names associated with the function declaration.
         *
         * For example, `function ex&lt;K,V&gt;(K key, map&lt;K, V&gt; map) : V` would yield
         * the type params of `K, V`.
         * </pre>
         *
         * <code>repeated string type_params = 3 [json_name = "typeParams"];</code>
         * @param value The bytes of the typeParams to add.
         * @return This builder for chaining.
         */
        public Builder addTypeParamsBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.addTypeParamsBytes(value);
          return this;
        }

        /**
         * <pre>
         * Required. The result type of the function. For example, the operator
         * `string.isEmpty()` would have `result_type` of `kind: BOOL`.
         * </pre>
         *
         * <code>.google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];</code>
         */
        @java.lang.Override
        public boolean hasResultType() {
          return instance.hasResultType();
        }
        /**
         * <pre>
         * Required. The result type of the function. For example, the operator
         * `string.isEmpty()` would have `result_type` of `kind: BOOL`.
         * </pre>
         *
         * <code>.google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];</code>
         */
        @java.lang.Override
        public com.google.api.expr.v1alpha1.Type getResultType() {
          return instance.getResultType();
        }
        /**
         * <pre>
         * Required. The result type of the function. For example, the operator
         * `string.isEmpty()` would have `result_type` of `kind: BOOL`.
         * </pre>
         *
         * <code>.google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];</code>
         */
        public Builder setResultType(com.google.api.expr.v1alpha1.Type value) {
          copyOnWrite();
          instance.setResultType(value);
          return this;
          }
        /**
         * <pre>
         * Required. The result type of the function. For example, the operator
         * `string.isEmpty()` would have `result_type` of `kind: BOOL`.
         * </pre>
         *
         * <code>.google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];</code>
         */
        public Builder setResultType(
            com.google.api.expr.v1alpha1.Type.Builder builderForValue) {
          copyOnWrite();
          instance.setResultType(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * Required. The result type of the function. For example, the operator
         * `string.isEmpty()` would have `result_type` of `kind: BOOL`.
         * </pre>
         *
         * <code>.google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];</code>
         */
        public Builder mergeResultType(com.google.api.expr.v1alpha1.Type value) {
          copyOnWrite();
          instance.mergeResultType(value);
          return this;
        }
        /**
         * <pre>
         * Required. The result type of the function. For example, the operator
         * `string.isEmpty()` would have `result_type` of `kind: BOOL`.
         * </pre>
         *
         * <code>.google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];</code>
         */
        public Builder clearResultType() {  copyOnWrite();
          instance.clearResultType();
          return this;
        }

        /**
         * <pre>
         * Whether the function is to be used in a method call-style `x.f(...)`
         * or a function call-style `f(x, ...)`.
         *
         * For methods, the first parameter declaration, `params[0]` is the
         * expected type of the target receiver.
         * </pre>
         *
         * <code>bool is_instance_function = 5 [json_name = "isInstanceFunction"];</code>
         * @return The isInstanceFunction.
         */
        @java.lang.Override
        public boolean getIsInstanceFunction() {
          return instance.getIsInstanceFunction();
        }
        /**
         * <pre>
         * Whether the function is to be used in a method call-style `x.f(...)`
         * or a function call-style `f(x, ...)`.
         *
         * For methods, the first parameter declaration, `params[0]` is the
         * expected type of the target receiver.
         * </pre>
         *
         * <code>bool is_instance_function = 5 [json_name = "isInstanceFunction"];</code>
         * @param value The isInstanceFunction to set.
         * @return This builder for chaining.
         */
        public Builder setIsInstanceFunction(boolean value) {
          copyOnWrite();
          instance.setIsInstanceFunction(value);
          return this;
        }
        /**
         * <pre>
         * Whether the function is to be used in a method call-style `x.f(...)`
         * or a function call-style `f(x, ...)`.
         *
         * For methods, the first parameter declaration, `params[0]` is the
         * expected type of the target receiver.
         * </pre>
         *
         * <code>bool is_instance_function = 5 [json_name = "isInstanceFunction"];</code>
         * @return This builder for chaining.
         */
        public Builder clearIsInstanceFunction() {
          copyOnWrite();
          instance.clearIsInstanceFunction();
          return this;
        }

        /**
         * <pre>
         * Documentation string for the overload.
         * </pre>
         *
         * <code>string doc = 6 [json_name = "doc"];</code>
         * @return The doc.
         */
        @java.lang.Override
        public java.lang.String getDoc() {
          return instance.getDoc();
        }
        /**
         * <pre>
         * Documentation string for the overload.
         * </pre>
         *
         * <code>string doc = 6 [json_name = "doc"];</code>
         * @return The bytes for doc.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getDocBytes() {
          return instance.getDocBytes();
        }
        /**
         * <pre>
         * Documentation string for the overload.
         * </pre>
         *
         * <code>string doc = 6 [json_name = "doc"];</code>
         * @param value The doc to set.
         * @return This builder for chaining.
         */
        public Builder setDoc(
            java.lang.String value) {
          copyOnWrite();
          instance.setDoc(value);
          return this;
        }
        /**
         * <pre>
         * Documentation string for the overload.
         * </pre>
         *
         * <code>string doc = 6 [json_name = "doc"];</code>
         * @return This builder for chaining.
         */
        public Builder clearDoc() {
          copyOnWrite();
          instance.clearDoc();
          return this;
        }
        /**
         * <pre>
         * Documentation string for the overload.
         * </pre>
         *
         * <code>string doc = 6 [json_name = "doc"];</code>
         * @param value The bytes for doc to set.
         * @return This builder for chaining.
         */
        public Builder setDocBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setDocBytes(value);
          return this;
        }

        // @@protoc_insertion_point(builder_scope:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "overloadId_",
                "params_",
                com.google.api.expr.v1alpha1.Type.class,
                "typeParams_",
                "resultType_",
                "isInstanceFunction_",
                "doc_",
              };
              java.lang.String info =
                  "\u0000\u0006\u0000\u0001\u0001\u0006\u0006\u0000\u0002\u0000\u0001\u0208\u0002\u001b" +
                  "\u0003\u021a\u0004\u1009\u0000\u0005\u0007\u0006\u0208";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload> parser = PARSER;
            if (parser == null) {
              synchronized (com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
      private static final com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload DEFAULT_INSTANCE;
      static {
        Overload defaultInstance = new Overload();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          Overload.class, defaultInstance);
      }

      public static com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<Overload> PARSER;

      public static com.google.protobuf.Parser<Overload> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public static final int OVERLOADS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload> overloads_;
    /**
     * <pre>
     * Required. List of function overloads, must contain at least one overload.
     * </pre>
     *
     * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
     */
    @java.lang.Override
    public java.util.List<com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload> getOverloadsList() {
      return overloads_;
    }
    /**
     * <pre>
     * Required. List of function overloads, must contain at least one overload.
     * </pre>
     *
     * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
     */
    public java.util.List<? extends com.google.api.expr.v1alpha1.Decl.FunctionDecl.OverloadOrBuilder> 
        getOverloadsOrBuilderList() {
      return overloads_;
    }
    /**
     * <pre>
     * Required. List of function overloads, must contain at least one overload.
     * </pre>
     *
     * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
     */
    @java.lang.Override
    public int getOverloadsCount() {
      return overloads_.size();
    }
    /**
     * <pre>
     * Required. List of function overloads, must contain at least one overload.
     * </pre>
     *
     * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload getOverloads(int index) {
      return overloads_.get(index);
    }
    /**
     * <pre>
     * Required. List of function overloads, must contain at least one overload.
     * </pre>
     *
     * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
     */
    public com.google.api.expr.v1alpha1.Decl.FunctionDecl.OverloadOrBuilder getOverloadsOrBuilder(
        int index) {
      return overloads_.get(index);
    }
    private void ensureOverloadsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload> tmp = overloads_;
      if (!tmp.isModifiable()) {
        overloads_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Required. List of function overloads, must contain at least one overload.
     * </pre>
     *
     * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
     */
    private void setOverloads(
        int index, com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload value) {
      value.getClass();
  ensureOverloadsIsMutable();
      overloads_.set(index, value);
    }
    /**
     * <pre>
     * Required. List of function overloads, must contain at least one overload.
     * </pre>
     *
     * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
     */
    private void addOverloads(com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload value) {
      value.getClass();
  ensureOverloadsIsMutable();
      overloads_.add(value);
    }
    /**
     * <pre>
     * Required. List of function overloads, must contain at least one overload.
     * </pre>
     *
     * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
     */
    private void addOverloads(
        int index, com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload value) {
      value.getClass();
  ensureOverloadsIsMutable();
      overloads_.add(index, value);
    }
    /**
     * <pre>
     * Required. List of function overloads, must contain at least one overload.
     * </pre>
     *
     * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
     */
    private void addAllOverloads(
        java.lang.Iterable<? extends com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload> values) {
      ensureOverloadsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, overloads_);
    }
    /**
     * <pre>
     * Required. List of function overloads, must contain at least one overload.
     * </pre>
     *
     * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
     */
    private void clearOverloads() {
      overloads_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Required. List of function overloads, must contain at least one overload.
     * </pre>
     *
     * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
     */
    private void removeOverloads(int index) {
      ensureOverloadsIsMutable();
      overloads_.remove(index);
    }

    public static com.google.api.expr.v1alpha1.Decl.FunctionDecl parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.api.expr.v1alpha1.Decl.FunctionDecl parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.api.expr.v1alpha1.Decl.FunctionDecl parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.api.expr.v1alpha1.Decl.FunctionDecl parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.api.expr.v1alpha1.Decl.FunctionDecl parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.api.expr.v1alpha1.Decl.FunctionDecl parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.api.expr.v1alpha1.Decl.FunctionDecl parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.api.expr.v1alpha1.Decl.FunctionDecl parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static com.google.api.expr.v1alpha1.Decl.FunctionDecl parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static com.google.api.expr.v1alpha1.Decl.FunctionDecl parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.api.expr.v1alpha1.Decl.FunctionDecl parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.api.expr.v1alpha1.Decl.FunctionDecl parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.api.expr.v1alpha1.Decl.FunctionDecl prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Function declaration specifies one or more overloads which indicate the
     * function's parameter types and return type.
     *
     * Functions have no observable side-effects (there may be side-effects like
     * logging which are not observable from CEL).
     * </pre>
     *
     * Protobuf type {@code google.api.expr.v1alpha1.Decl.FunctionDecl}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.api.expr.v1alpha1.Decl.FunctionDecl, Builder> implements
        // @@protoc_insertion_point(builder_implements:google.api.expr.v1alpha1.Decl.FunctionDecl)
        com.google.api.expr.v1alpha1.Decl.FunctionDeclOrBuilder {
      // Construct using com.google.api.expr.v1alpha1.Decl.FunctionDecl.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Required. List of function overloads, must contain at least one overload.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
       */
      @java.lang.Override
      public java.util.List<com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload> getOverloadsList() {
        return java.util.Collections.unmodifiableList(
            instance.getOverloadsList());
      }
      /**
       * <pre>
       * Required. List of function overloads, must contain at least one overload.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
       */
      @java.lang.Override
      public int getOverloadsCount() {
        return instance.getOverloadsCount();
      }/**
       * <pre>
       * Required. List of function overloads, must contain at least one overload.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
       */
      @java.lang.Override
      public com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload getOverloads(int index) {
        return instance.getOverloads(index);
      }
      /**
       * <pre>
       * Required. List of function overloads, must contain at least one overload.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
       */
      public Builder setOverloads(
          int index, com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload value) {
        copyOnWrite();
        instance.setOverloads(index, value);
        return this;
      }
      /**
       * <pre>
       * Required. List of function overloads, must contain at least one overload.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
       */
      public Builder setOverloads(
          int index, com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.Builder builderForValue) {
        copyOnWrite();
        instance.setOverloads(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Required. List of function overloads, must contain at least one overload.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
       */
      public Builder addOverloads(com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload value) {
        copyOnWrite();
        instance.addOverloads(value);
        return this;
      }
      /**
       * <pre>
       * Required. List of function overloads, must contain at least one overload.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
       */
      public Builder addOverloads(
          int index, com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload value) {
        copyOnWrite();
        instance.addOverloads(index, value);
        return this;
      }
      /**
       * <pre>
       * Required. List of function overloads, must contain at least one overload.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
       */
      public Builder addOverloads(
          com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.Builder builderForValue) {
        copyOnWrite();
        instance.addOverloads(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Required. List of function overloads, must contain at least one overload.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
       */
      public Builder addOverloads(
          int index, com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.Builder builderForValue) {
        copyOnWrite();
        instance.addOverloads(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Required. List of function overloads, must contain at least one overload.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
       */
      public Builder addAllOverloads(
          java.lang.Iterable<? extends com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload> values) {
        copyOnWrite();
        instance.addAllOverloads(values);
        return this;
      }
      /**
       * <pre>
       * Required. List of function overloads, must contain at least one overload.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
       */
      public Builder clearOverloads() {
        copyOnWrite();
        instance.clearOverloads();
        return this;
      }
      /**
       * <pre>
       * Required. List of function overloads, must contain at least one overload.
       * </pre>
       *
       * <code>repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];</code>
       */
      public Builder removeOverloads(int index) {
        copyOnWrite();
        instance.removeOverloads(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:google.api.expr.v1alpha1.Decl.FunctionDecl)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.api.expr.v1alpha1.Decl.FunctionDecl();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "overloads_",
              com.google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.class,
            };
            java.lang.String info =
                "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0000\u0001\u001b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.api.expr.v1alpha1.Decl.FunctionDecl> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.api.expr.v1alpha1.Decl.FunctionDecl.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.api.expr.v1alpha1.Decl.FunctionDecl>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl.FunctionDecl)
    private static final com.google.api.expr.v1alpha1.Decl.FunctionDecl DEFAULT_INSTANCE;
    static {
      FunctionDecl defaultInstance = new FunctionDecl();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        FunctionDecl.class, defaultInstance);
    }

    public static com.google.api.expr.v1alpha1.Decl.FunctionDecl getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<FunctionDecl> PARSER;

    public static com.google.protobuf.Parser<FunctionDecl> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int declKindCase_ = 0;
  private java.lang.Object declKind_;
  public enum DeclKindCase {
    IDENT(2),
    FUNCTION(3),
    DECLKIND_NOT_SET(0);
    private final int value;
    private DeclKindCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DeclKindCase valueOf(int value) {
      return forNumber(value);
    }

    public static DeclKindCase forNumber(int value) {
      switch (value) {
        case 2: return IDENT;
        case 3: return FUNCTION;
        case 0: return DECLKIND_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public DeclKindCase
  getDeclKindCase() {
    return DeclKindCase.forNumber(
        declKindCase_);
  }

  private void clearDeclKind() {
    declKindCase_ = 0;
    declKind_ = null;
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private java.lang.String name_;
  /**
   * <pre>
   * The fully qualified name of the declaration.
   *
   * Declarations are organized in containers and this represents the full path
   * to the declaration in its container, as in `google.api.expr.Decl`.
   *
   * Declarations used as
   * [FunctionDecl.Overload][google.api.expr.v1alpha1.Decl.FunctionDecl.Overload]
   * parameters may or may not have a name depending on whether the overload is
   * function declaration or a function definition containing a result
   * [Expr][google.api.expr.v1alpha1.Expr].
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    return name_;
  }
  /**
   * <pre>
   * The fully qualified name of the declaration.
   *
   * Declarations are organized in containers and this represents the full path
   * to the declaration in its container, as in `google.api.expr.Decl`.
   *
   * Declarations used as
   * [FunctionDecl.Overload][google.api.expr.v1alpha1.Decl.FunctionDecl.Overload]
   * parameters may or may not have a name depending on whether the overload is
   * function declaration or a function definition containing a result
   * [Expr][google.api.expr.v1alpha1.Expr].
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   * <pre>
   * The fully qualified name of the declaration.
   *
   * Declarations are organized in containers and this represents the full path
   * to the declaration in its container, as in `google.api.expr.Decl`.
   *
   * Declarations used as
   * [FunctionDecl.Overload][google.api.expr.v1alpha1.Decl.FunctionDecl.Overload]
   * parameters may or may not have a name depending on whether the overload is
   * function declaration or a function definition containing a result
   * [Expr][google.api.expr.v1alpha1.Expr].
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @param value The name to set.
   */
  private void setName(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    name_ = value;
  }
  /**
   * <pre>
   * The fully qualified name of the declaration.
   *
   * Declarations are organized in containers and this represents the full path
   * to the declaration in its container, as in `google.api.expr.Decl`.
   *
   * Declarations used as
   * [FunctionDecl.Overload][google.api.expr.v1alpha1.Decl.FunctionDecl.Overload]
   * parameters may or may not have a name depending on whether the overload is
   * function declaration or a function definition containing a result
   * [Expr][google.api.expr.v1alpha1.Expr].
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   */
  private void clearName() {

    name_ = getDefaultInstance().getName();
  }
  /**
   * <pre>
   * The fully qualified name of the declaration.
   *
   * Declarations are organized in containers and this represents the full path
   * to the declaration in its container, as in `google.api.expr.Decl`.
   *
   * Declarations used as
   * [FunctionDecl.Overload][google.api.expr.v1alpha1.Decl.FunctionDecl.Overload]
   * parameters may or may not have a name depending on whether the overload is
   * function declaration or a function definition containing a result
   * [Expr][google.api.expr.v1alpha1.Expr].
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @param value The bytes for name to set.
   */
  private void setNameBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    name_ = value.toStringUtf8();

  }

  public static final int IDENT_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Identifier declaration.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];</code>
   */
  @java.lang.Override
  public boolean hasIdent() {
    return declKindCase_ == 2;
  }
  /**
   * <pre>
   * Identifier declaration.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];</code>
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.Decl.IdentDecl getIdent() {
    if (declKindCase_ == 2) {
       return (com.google.api.expr.v1alpha1.Decl.IdentDecl) declKind_;
    }
    return com.google.api.expr.v1alpha1.Decl.IdentDecl.getDefaultInstance();
  }
  /**
   * <pre>
   * Identifier declaration.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];</code>
   */
  private void setIdent(com.google.api.expr.v1alpha1.Decl.IdentDecl value) {
    value.getClass();
  declKind_ = value;
    declKindCase_ = 2;
  }
  /**
   * <pre>
   * Identifier declaration.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];</code>
   */
  private void mergeIdent(com.google.api.expr.v1alpha1.Decl.IdentDecl value) {
    value.getClass();
  if (declKindCase_ == 2 &&
        declKind_ != com.google.api.expr.v1alpha1.Decl.IdentDecl.getDefaultInstance()) {
      declKind_ = com.google.api.expr.v1alpha1.Decl.IdentDecl.newBuilder((com.google.api.expr.v1alpha1.Decl.IdentDecl) declKind_)
          .mergeFrom(value).buildPartial();
    } else {
      declKind_ = value;
    }
    declKindCase_ = 2;
  }
  /**
   * <pre>
   * Identifier declaration.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];</code>
   */
  private void clearIdent() {
    if (declKindCase_ == 2) {
      declKindCase_ = 0;
      declKind_ = null;
    }
  }

  public static final int FUNCTION_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Function declaration.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];</code>
   */
  @java.lang.Override
  public boolean hasFunction() {
    return declKindCase_ == 3;
  }
  /**
   * <pre>
   * Function declaration.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];</code>
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.Decl.FunctionDecl getFunction() {
    if (declKindCase_ == 3) {
       return (com.google.api.expr.v1alpha1.Decl.FunctionDecl) declKind_;
    }
    return com.google.api.expr.v1alpha1.Decl.FunctionDecl.getDefaultInstance();
  }
  /**
   * <pre>
   * Function declaration.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];</code>
   */
  private void setFunction(com.google.api.expr.v1alpha1.Decl.FunctionDecl value) {
    value.getClass();
  declKind_ = value;
    declKindCase_ = 3;
  }
  /**
   * <pre>
   * Function declaration.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];</code>
   */
  private void mergeFunction(com.google.api.expr.v1alpha1.Decl.FunctionDecl value) {
    value.getClass();
  if (declKindCase_ == 3 &&
        declKind_ != com.google.api.expr.v1alpha1.Decl.FunctionDecl.getDefaultInstance()) {
      declKind_ = com.google.api.expr.v1alpha1.Decl.FunctionDecl.newBuilder((com.google.api.expr.v1alpha1.Decl.FunctionDecl) declKind_)
          .mergeFrom(value).buildPartial();
    } else {
      declKind_ = value;
    }
    declKindCase_ = 3;
  }
  /**
   * <pre>
   * Function declaration.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];</code>
   */
  private void clearFunction() {
    if (declKindCase_ == 3) {
      declKindCase_ = 0;
      declKind_ = null;
    }
  }

  public static com.google.api.expr.v1alpha1.Decl parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.expr.v1alpha1.Decl parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.Decl parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.expr.v1alpha1.Decl parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.Decl parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.expr.v1alpha1.Decl parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.Decl parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.expr.v1alpha1.Decl parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.api.expr.v1alpha1.Decl parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.api.expr.v1alpha1.Decl parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.Decl parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.expr.v1alpha1.Decl parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.api.expr.v1alpha1.Decl prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Represents a declaration of a named value or function.
   *
   * A declaration is part of the contract between the expression, the agent
   * evaluating that expression, and the caller requesting evaluation.
   * </pre>
   *
   * Protobuf type {@code google.api.expr.v1alpha1.Decl}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.api.expr.v1alpha1.Decl, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.expr.v1alpha1.Decl)
      com.google.api.expr.v1alpha1.DeclOrBuilder {
    // Construct using com.google.api.expr.v1alpha1.Decl.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public DeclKindCase
        getDeclKindCase() {
      return instance.getDeclKindCase();
    }

    public Builder clearDeclKind() {
      copyOnWrite();
      instance.clearDeclKind();
      return this;
    }


    /**
     * <pre>
     * The fully qualified name of the declaration.
     *
     * Declarations are organized in containers and this represents the full path
     * to the declaration in its container, as in `google.api.expr.Decl`.
     *
     * Declarations used as
     * [FunctionDecl.Overload][google.api.expr.v1alpha1.Decl.FunctionDecl.Overload]
     * parameters may or may not have a name depending on whether the overload is
     * function declaration or a function definition containing a result
     * [Expr][google.api.expr.v1alpha1.Expr].
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      return instance.getName();
    }
    /**
     * <pre>
     * The fully qualified name of the declaration.
     *
     * Declarations are organized in containers and this represents the full path
     * to the declaration in its container, as in `google.api.expr.Decl`.
     *
     * Declarations used as
     * [FunctionDecl.Overload][google.api.expr.v1alpha1.Decl.FunctionDecl.Overload]
     * parameters may or may not have a name depending on whether the overload is
     * function declaration or a function definition containing a result
     * [Expr][google.api.expr.v1alpha1.Expr].
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     * <pre>
     * The fully qualified name of the declaration.
     *
     * Declarations are organized in containers and this represents the full path
     * to the declaration in its container, as in `google.api.expr.Decl`.
     *
     * Declarations used as
     * [FunctionDecl.Overload][google.api.expr.v1alpha1.Decl.FunctionDecl.Overload]
     * parameters may or may not have a name depending on whether the overload is
     * function declaration or a function definition containing a result
     * [Expr][google.api.expr.v1alpha1.Expr].
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <pre>
     * The fully qualified name of the declaration.
     *
     * Declarations are organized in containers and this represents the full path
     * to the declaration in its container, as in `google.api.expr.Decl`.
     *
     * Declarations used as
     * [FunctionDecl.Overload][google.api.expr.v1alpha1.Decl.FunctionDecl.Overload]
     * parameters may or may not have a name depending on whether the overload is
     * function declaration or a function definition containing a result
     * [Expr][google.api.expr.v1alpha1.Expr].
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     * <pre>
     * The fully qualified name of the declaration.
     *
     * Declarations are organized in containers and this represents the full path
     * to the declaration in its container, as in `google.api.expr.Decl`.
     *
     * Declarations used as
     * [FunctionDecl.Overload][google.api.expr.v1alpha1.Decl.FunctionDecl.Overload]
     * parameters may or may not have a name depending on whether the overload is
     * function declaration or a function definition containing a result
     * [Expr][google.api.expr.v1alpha1.Expr].
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * Identifier declaration.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];</code>
     */
    @java.lang.Override
    public boolean hasIdent() {
      return instance.hasIdent();
    }
    /**
     * <pre>
     * Identifier declaration.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];</code>
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.Decl.IdentDecl getIdent() {
      return instance.getIdent();
    }
    /**
     * <pre>
     * Identifier declaration.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];</code>
     */
    public Builder setIdent(com.google.api.expr.v1alpha1.Decl.IdentDecl value) {
      copyOnWrite();
      instance.setIdent(value);
      return this;
    }
    /**
     * <pre>
     * Identifier declaration.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];</code>
     */
    public Builder setIdent(
        com.google.api.expr.v1alpha1.Decl.IdentDecl.Builder builderForValue) {
      copyOnWrite();
      instance.setIdent(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Identifier declaration.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];</code>
     */
    public Builder mergeIdent(com.google.api.expr.v1alpha1.Decl.IdentDecl value) {
      copyOnWrite();
      instance.mergeIdent(value);
      return this;
    }
    /**
     * <pre>
     * Identifier declaration.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];</code>
     */
    public Builder clearIdent() {
      copyOnWrite();
      instance.clearIdent();
      return this;
    }

    /**
     * <pre>
     * Function declaration.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];</code>
     */
    @java.lang.Override
    public boolean hasFunction() {
      return instance.hasFunction();
    }
    /**
     * <pre>
     * Function declaration.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];</code>
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.Decl.FunctionDecl getFunction() {
      return instance.getFunction();
    }
    /**
     * <pre>
     * Function declaration.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];</code>
     */
    public Builder setFunction(com.google.api.expr.v1alpha1.Decl.FunctionDecl value) {
      copyOnWrite();
      instance.setFunction(value);
      return this;
    }
    /**
     * <pre>
     * Function declaration.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];</code>
     */
    public Builder setFunction(
        com.google.api.expr.v1alpha1.Decl.FunctionDecl.Builder builderForValue) {
      copyOnWrite();
      instance.setFunction(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Function declaration.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];</code>
     */
    public Builder mergeFunction(com.google.api.expr.v1alpha1.Decl.FunctionDecl value) {
      copyOnWrite();
      instance.mergeFunction(value);
      return this;
    }
    /**
     * <pre>
     * Function declaration.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];</code>
     */
    public Builder clearFunction() {
      copyOnWrite();
      instance.clearFunction();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.api.expr.v1alpha1.Decl)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.api.expr.v1alpha1.Decl();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "declKind_",
            "declKindCase_",
            "name_",
            com.google.api.expr.v1alpha1.Decl.IdentDecl.class,
            com.google.api.expr.v1alpha1.Decl.FunctionDecl.class,
          };
          java.lang.String info =
              "\u0000\u0003\u0001\u0000\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u0208\u0002<\u0000" +
              "\u0003<\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.api.expr.v1alpha1.Decl> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.api.expr.v1alpha1.Decl.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.api.expr.v1alpha1.Decl>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl)
  private static final com.google.api.expr.v1alpha1.Decl DEFAULT_INSTANCE;
  static {
    Decl defaultInstance = new Decl();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      Decl.class, defaultInstance);
  }

  public static com.google.api.expr.v1alpha1.Decl getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Decl> PARSER;

  public static com.google.protobuf.Parser<Decl> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

