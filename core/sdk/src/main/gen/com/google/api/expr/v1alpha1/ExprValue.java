// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/api/expr/v1alpha1/eval.proto
// Protobuf Java Version: 4.27.2

package com.google.api.expr.v1alpha1;

/**
 * <pre>
 * The value of an evaluated expression.
 * </pre>
 *
 * Protobuf type {@code google.api.expr.v1alpha1.ExprValue}
 */
public  final class ExprValue extends
    com.google.protobuf.GeneratedMessageLite<
        ExprValue, ExprValue.Builder> implements
    // @@protoc_insertion_point(message_implements:google.api.expr.v1alpha1.ExprValue)
    ExprValueOrBuilder {
  private ExprValue() {
  }
  private int kindCase_ = 0;
  private java.lang.Object kind_;
  public enum KindCase {
    VALUE(1),
    ERROR(2),
    UNKNOWN(3),
    KIND_NOT_SET(0);
    private final int value;
    private KindCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static KindCase valueOf(int value) {
      return forNumber(value);
    }

    public static KindCase forNumber(int value) {
      switch (value) {
        case 1: return VALUE;
        case 2: return ERROR;
        case 3: return UNKNOWN;
        case 0: return KIND_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public KindCase
  getKindCase() {
    return KindCase.forNumber(
        kindCase_);
  }

  private void clearKind() {
    kindCase_ = 0;
    kind_ = null;
  }

  public static final int VALUE_FIELD_NUMBER = 1;
  /**
   * <pre>
   * A concrete value.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];</code>
   */
  @java.lang.Override
  public boolean hasValue() {
    return kindCase_ == 1;
  }
  /**
   * <pre>
   * A concrete value.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];</code>
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.Value getValue() {
    if (kindCase_ == 1) {
       return (com.google.api.expr.v1alpha1.Value) kind_;
    }
    return com.google.api.expr.v1alpha1.Value.getDefaultInstance();
  }
  /**
   * <pre>
   * A concrete value.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];</code>
   */
  private void setValue(com.google.api.expr.v1alpha1.Value value) {
    value.getClass();
  kind_ = value;
    kindCase_ = 1;
  }
  /**
   * <pre>
   * A concrete value.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];</code>
   */
  private void mergeValue(com.google.api.expr.v1alpha1.Value value) {
    value.getClass();
  if (kindCase_ == 1 &&
        kind_ != com.google.api.expr.v1alpha1.Value.getDefaultInstance()) {
      kind_ = com.google.api.expr.v1alpha1.Value.newBuilder((com.google.api.expr.v1alpha1.Value) kind_)
          .mergeFrom(value).buildPartial();
    } else {
      kind_ = value;
    }
    kindCase_ = 1;
  }
  /**
   * <pre>
   * A concrete value.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];</code>
   */
  private void clearValue() {
    if (kindCase_ == 1) {
      kindCase_ = 0;
      kind_ = null;
    }
  }

  public static final int ERROR_FIELD_NUMBER = 2;
  /**
   * <pre>
   * The set of errors in the critical path of evalution.
   *
   * Only errors in the critical path are included. For example,
   * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
   * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
   * `&lt;error2&gt;`.
   *
   * Errors cause by the presence of other errors are not included in the
   * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
   * only result in `&lt;error1&gt;`.
   *
   * Multiple errors *might* be included when evaluation could result
   * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
   * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
   * The exact subset of errors included for this case is unspecified and
   * depends on the implementation details of the evaluator.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];</code>
   */
  @java.lang.Override
  public boolean hasError() {
    return kindCase_ == 2;
  }
  /**
   * <pre>
   * The set of errors in the critical path of evalution.
   *
   * Only errors in the critical path are included. For example,
   * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
   * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
   * `&lt;error2&gt;`.
   *
   * Errors cause by the presence of other errors are not included in the
   * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
   * only result in `&lt;error1&gt;`.
   *
   * Multiple errors *might* be included when evaluation could result
   * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
   * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
   * The exact subset of errors included for this case is unspecified and
   * depends on the implementation details of the evaluator.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];</code>
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.ErrorSet getError() {
    if (kindCase_ == 2) {
       return (com.google.api.expr.v1alpha1.ErrorSet) kind_;
    }
    return com.google.api.expr.v1alpha1.ErrorSet.getDefaultInstance();
  }
  /**
   * <pre>
   * The set of errors in the critical path of evalution.
   *
   * Only errors in the critical path are included. For example,
   * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
   * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
   * `&lt;error2&gt;`.
   *
   * Errors cause by the presence of other errors are not included in the
   * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
   * only result in `&lt;error1&gt;`.
   *
   * Multiple errors *might* be included when evaluation could result
   * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
   * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
   * The exact subset of errors included for this case is unspecified and
   * depends on the implementation details of the evaluator.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];</code>
   */
  private void setError(com.google.api.expr.v1alpha1.ErrorSet value) {
    value.getClass();
  kind_ = value;
    kindCase_ = 2;
  }
  /**
   * <pre>
   * The set of errors in the critical path of evalution.
   *
   * Only errors in the critical path are included. For example,
   * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
   * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
   * `&lt;error2&gt;`.
   *
   * Errors cause by the presence of other errors are not included in the
   * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
   * only result in `&lt;error1&gt;`.
   *
   * Multiple errors *might* be included when evaluation could result
   * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
   * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
   * The exact subset of errors included for this case is unspecified and
   * depends on the implementation details of the evaluator.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];</code>
   */
  private void mergeError(com.google.api.expr.v1alpha1.ErrorSet value) {
    value.getClass();
  if (kindCase_ == 2 &&
        kind_ != com.google.api.expr.v1alpha1.ErrorSet.getDefaultInstance()) {
      kind_ = com.google.api.expr.v1alpha1.ErrorSet.newBuilder((com.google.api.expr.v1alpha1.ErrorSet) kind_)
          .mergeFrom(value).buildPartial();
    } else {
      kind_ = value;
    }
    kindCase_ = 2;
  }
  /**
   * <pre>
   * The set of errors in the critical path of evalution.
   *
   * Only errors in the critical path are included. For example,
   * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
   * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
   * `&lt;error2&gt;`.
   *
   * Errors cause by the presence of other errors are not included in the
   * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
   * only result in `&lt;error1&gt;`.
   *
   * Multiple errors *might* be included when evaluation could result
   * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
   * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
   * The exact subset of errors included for this case is unspecified and
   * depends on the implementation details of the evaluator.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];</code>
   */
  private void clearError() {
    if (kindCase_ == 2) {
      kindCase_ = 0;
      kind_ = null;
    }
  }

  public static final int UNKNOWN_FIELD_NUMBER = 3;
  /**
   * <pre>
   * The set of unknowns in the critical path of evaluation.
   *
   * Unknown behaves identically to Error with regards to propagation.
   * Specifically, only unknowns in the critical path are included, unknowns
   * caused by the presence of other unknowns are not included, and multiple
   * unknowns *might* be included included when evaluation could result in
   * different unknowns. For example:
   *
   * (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
   * &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
   * &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
   * foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
   * &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
   *
   * Unknown takes precidence over Error in cases where a `Value` can short
   * circuit the result:
   *
   * &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
   * &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
   *
   * Errors take precidence in all other cases:
   *
   * &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
   * foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];</code>
   */
  @java.lang.Override
  public boolean hasUnknown() {
    return kindCase_ == 3;
  }
  /**
   * <pre>
   * The set of unknowns in the critical path of evaluation.
   *
   * Unknown behaves identically to Error with regards to propagation.
   * Specifically, only unknowns in the critical path are included, unknowns
   * caused by the presence of other unknowns are not included, and multiple
   * unknowns *might* be included included when evaluation could result in
   * different unknowns. For example:
   *
   * (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
   * &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
   * &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
   * foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
   * &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
   *
   * Unknown takes precidence over Error in cases where a `Value` can short
   * circuit the result:
   *
   * &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
   * &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
   *
   * Errors take precidence in all other cases:
   *
   * &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
   * foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];</code>
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.UnknownSet getUnknown() {
    if (kindCase_ == 3) {
       return (com.google.api.expr.v1alpha1.UnknownSet) kind_;
    }
    return com.google.api.expr.v1alpha1.UnknownSet.getDefaultInstance();
  }
  /**
   * <pre>
   * The set of unknowns in the critical path of evaluation.
   *
   * Unknown behaves identically to Error with regards to propagation.
   * Specifically, only unknowns in the critical path are included, unknowns
   * caused by the presence of other unknowns are not included, and multiple
   * unknowns *might* be included included when evaluation could result in
   * different unknowns. For example:
   *
   * (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
   * &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
   * &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
   * foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
   * &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
   *
   * Unknown takes precidence over Error in cases where a `Value` can short
   * circuit the result:
   *
   * &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
   * &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
   *
   * Errors take precidence in all other cases:
   *
   * &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
   * foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];</code>
   */
  private void setUnknown(com.google.api.expr.v1alpha1.UnknownSet value) {
    value.getClass();
  kind_ = value;
    kindCase_ = 3;
  }
  /**
   * <pre>
   * The set of unknowns in the critical path of evaluation.
   *
   * Unknown behaves identically to Error with regards to propagation.
   * Specifically, only unknowns in the critical path are included, unknowns
   * caused by the presence of other unknowns are not included, and multiple
   * unknowns *might* be included included when evaluation could result in
   * different unknowns. For example:
   *
   * (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
   * &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
   * &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
   * foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
   * &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
   *
   * Unknown takes precidence over Error in cases where a `Value` can short
   * circuit the result:
   *
   * &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
   * &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
   *
   * Errors take precidence in all other cases:
   *
   * &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
   * foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];</code>
   */
  private void mergeUnknown(com.google.api.expr.v1alpha1.UnknownSet value) {
    value.getClass();
  if (kindCase_ == 3 &&
        kind_ != com.google.api.expr.v1alpha1.UnknownSet.getDefaultInstance()) {
      kind_ = com.google.api.expr.v1alpha1.UnknownSet.newBuilder((com.google.api.expr.v1alpha1.UnknownSet) kind_)
          .mergeFrom(value).buildPartial();
    } else {
      kind_ = value;
    }
    kindCase_ = 3;
  }
  /**
   * <pre>
   * The set of unknowns in the critical path of evaluation.
   *
   * Unknown behaves identically to Error with regards to propagation.
   * Specifically, only unknowns in the critical path are included, unknowns
   * caused by the presence of other unknowns are not included, and multiple
   * unknowns *might* be included included when evaluation could result in
   * different unknowns. For example:
   *
   * (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
   * &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
   * &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
   * foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
   * &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
   *
   * Unknown takes precidence over Error in cases where a `Value` can short
   * circuit the result:
   *
   * &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
   * &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
   *
   * Errors take precidence in all other cases:
   *
   * &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
   * foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];</code>
   */
  private void clearUnknown() {
    if (kindCase_ == 3) {
      kindCase_ = 0;
      kind_ = null;
    }
  }

  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.api.expr.v1alpha1.ExprValue parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.api.expr.v1alpha1.ExprValue parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.api.expr.v1alpha1.ExprValue prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * The value of an evaluated expression.
   * </pre>
   *
   * Protobuf type {@code google.api.expr.v1alpha1.ExprValue}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.api.expr.v1alpha1.ExprValue, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.expr.v1alpha1.ExprValue)
      com.google.api.expr.v1alpha1.ExprValueOrBuilder {
    // Construct using com.google.api.expr.v1alpha1.ExprValue.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public KindCase
        getKindCase() {
      return instance.getKindCase();
    }

    public Builder clearKind() {
      copyOnWrite();
      instance.clearKind();
      return this;
    }


    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];</code>
     */
    @java.lang.Override
    public boolean hasValue() {
      return instance.hasValue();
    }
    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];</code>
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.Value getValue() {
      return instance.getValue();
    }
    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];</code>
     */
    public Builder setValue(com.google.api.expr.v1alpha1.Value value) {
      copyOnWrite();
      instance.setValue(value);
      return this;
    }
    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];</code>
     */
    public Builder setValue(
        com.google.api.expr.v1alpha1.Value.Builder builderForValue) {
      copyOnWrite();
      instance.setValue(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];</code>
     */
    public Builder mergeValue(com.google.api.expr.v1alpha1.Value value) {
      copyOnWrite();
      instance.mergeValue(value);
      return this;
    }
    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1 [json_name = "value"];</code>
     */
    public Builder clearValue() {
      copyOnWrite();
      instance.clearValue();
      return this;
    }

    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     *
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     *
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     *
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];</code>
     */
    @java.lang.Override
    public boolean hasError() {
      return instance.hasError();
    }
    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     *
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     *
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     *
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];</code>
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.ErrorSet getError() {
      return instance.getError();
    }
    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     *
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     *
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     *
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];</code>
     */
    public Builder setError(com.google.api.expr.v1alpha1.ErrorSet value) {
      copyOnWrite();
      instance.setError(value);
      return this;
    }
    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     *
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     *
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     *
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];</code>
     */
    public Builder setError(
        com.google.api.expr.v1alpha1.ErrorSet.Builder builderForValue) {
      copyOnWrite();
      instance.setError(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     *
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     *
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     *
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];</code>
     */
    public Builder mergeError(com.google.api.expr.v1alpha1.ErrorSet value) {
      copyOnWrite();
      instance.mergeError(value);
      return this;
    }
    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     *
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     *
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     *
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2 [json_name = "error"];</code>
     */
    public Builder clearError() {
      copyOnWrite();
      instance.clearError();
      return this;
    }

    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     *
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *
     * (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     * &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     * &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     * foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     * &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     *
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *
     * &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *
     * Errors take precidence in all other cases:
     *
     * &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     * foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];</code>
     */
    @java.lang.Override
    public boolean hasUnknown() {
      return instance.hasUnknown();
    }
    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     *
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *
     * (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     * &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     * &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     * foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     * &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     *
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *
     * &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *
     * Errors take precidence in all other cases:
     *
     * &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     * foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];</code>
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.UnknownSet getUnknown() {
      return instance.getUnknown();
    }
    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     *
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *
     * (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     * &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     * &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     * foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     * &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     *
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *
     * &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *
     * Errors take precidence in all other cases:
     *
     * &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     * foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];</code>
     */
    public Builder setUnknown(com.google.api.expr.v1alpha1.UnknownSet value) {
      copyOnWrite();
      instance.setUnknown(value);
      return this;
    }
    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     *
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *
     * (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     * &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     * &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     * foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     * &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     *
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *
     * &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *
     * Errors take precidence in all other cases:
     *
     * &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     * foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];</code>
     */
    public Builder setUnknown(
        com.google.api.expr.v1alpha1.UnknownSet.Builder builderForValue) {
      copyOnWrite();
      instance.setUnknown(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     *
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *
     * (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     * &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     * &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     * foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     * &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     *
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *
     * &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *
     * Errors take precidence in all other cases:
     *
     * &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     * foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];</code>
     */
    public Builder mergeUnknown(com.google.api.expr.v1alpha1.UnknownSet value) {
      copyOnWrite();
      instance.mergeUnknown(value);
      return this;
    }
    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     *
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *
     * (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     * &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     * &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     * foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     * &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     *
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *
     * &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *
     * Errors take precidence in all other cases:
     *
     * &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     * foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3 [json_name = "unknown"];</code>
     */
    public Builder clearUnknown() {
      copyOnWrite();
      instance.clearUnknown();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.api.expr.v1alpha1.ExprValue)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.api.expr.v1alpha1.ExprValue();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "kind_",
            "kindCase_",
            com.google.api.expr.v1alpha1.Value.class,
            com.google.api.expr.v1alpha1.ErrorSet.class,
            com.google.api.expr.v1alpha1.UnknownSet.class,
          };
          java.lang.String info =
              "\u0000\u0003\u0001\u0000\u0001\u0003\u0003\u0000\u0000\u0000\u0001<\u0000\u0002<" +
              "\u0000\u0003<\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.api.expr.v1alpha1.ExprValue> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.api.expr.v1alpha1.ExprValue.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.api.expr.v1alpha1.ExprValue>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.ExprValue)
  private static final com.google.api.expr.v1alpha1.ExprValue DEFAULT_INSTANCE;
  static {
    ExprValue defaultInstance = new ExprValue();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ExprValue.class, defaultInstance);
  }

  public static com.google.api.expr.v1alpha1.ExprValue getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ExprValue> PARSER;

  public static com.google.protobuf.Parser<ExprValue> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

