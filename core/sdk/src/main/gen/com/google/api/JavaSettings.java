// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/client.proto

// Protobuf Java Version: 3.25.2
package com.google.api;

/**
 * <pre>
 * Settings for Java client libraries.
 * </pre>
 *
 * Protobuf type {@code google.api.JavaSettings}
 */
public  final class JavaSettings extends
    com.google.protobuf.GeneratedMessageLite<
        JavaSettings, JavaSettings.Builder> implements
    // @@protoc_insertion_point(message_implements:google.api.JavaSettings)
    JavaSettingsOrBuilder {
  private JavaSettings() {
    libraryPackage_ = "";
  }
  private int bitField0_;
  public static final int LIBRARY_PACKAGE_FIELD_NUMBER = 1;
  private java.lang.String libraryPackage_;
  /**
   * <pre>
   * The package name to use in Java. Clobbers the java_package option
   * set in the protobuf. This should be used **only** by APIs
   * who have already set the language_settings.java.package_name" field
   * in gapic.yaml. API teams should use the protobuf java_package option
   * where possible.
   *
   * Example of a YAML configuration::
   *
   *  publishing:
   *    java_settings:
   *      library_package: com.google.cloud.pubsub.v1
   * </pre>
   *
   * <code>string library_package = 1 [json_name = "libraryPackage"];</code>
   * @return The libraryPackage.
   */
  @java.lang.Override
  public java.lang.String getLibraryPackage() {
    return libraryPackage_;
  }
  /**
   * <pre>
   * The package name to use in Java. Clobbers the java_package option
   * set in the protobuf. This should be used **only** by APIs
   * who have already set the language_settings.java.package_name" field
   * in gapic.yaml. API teams should use the protobuf java_package option
   * where possible.
   *
   * Example of a YAML configuration::
   *
   *  publishing:
   *    java_settings:
   *      library_package: com.google.cloud.pubsub.v1
   * </pre>
   *
   * <code>string library_package = 1 [json_name = "libraryPackage"];</code>
   * @return The bytes for libraryPackage.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getLibraryPackageBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(libraryPackage_);
  }
  /**
   * <pre>
   * The package name to use in Java. Clobbers the java_package option
   * set in the protobuf. This should be used **only** by APIs
   * who have already set the language_settings.java.package_name" field
   * in gapic.yaml. API teams should use the protobuf java_package option
   * where possible.
   *
   * Example of a YAML configuration::
   *
   *  publishing:
   *    java_settings:
   *      library_package: com.google.cloud.pubsub.v1
   * </pre>
   *
   * <code>string library_package = 1 [json_name = "libraryPackage"];</code>
   * @param value The libraryPackage to set.
   */
  private void setLibraryPackage(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    libraryPackage_ = value;
  }
  /**
   * <pre>
   * The package name to use in Java. Clobbers the java_package option
   * set in the protobuf. This should be used **only** by APIs
   * who have already set the language_settings.java.package_name" field
   * in gapic.yaml. API teams should use the protobuf java_package option
   * where possible.
   *
   * Example of a YAML configuration::
   *
   *  publishing:
   *    java_settings:
   *      library_package: com.google.cloud.pubsub.v1
   * </pre>
   *
   * <code>string library_package = 1 [json_name = "libraryPackage"];</code>
   */
  private void clearLibraryPackage() {

    libraryPackage_ = getDefaultInstance().getLibraryPackage();
  }
  /**
   * <pre>
   * The package name to use in Java. Clobbers the java_package option
   * set in the protobuf. This should be used **only** by APIs
   * who have already set the language_settings.java.package_name" field
   * in gapic.yaml. API teams should use the protobuf java_package option
   * where possible.
   *
   * Example of a YAML configuration::
   *
   *  publishing:
   *    java_settings:
   *      library_package: com.google.cloud.pubsub.v1
   * </pre>
   *
   * <code>string library_package = 1 [json_name = "libraryPackage"];</code>
   * @param value The bytes for libraryPackage to set.
   */
  private void setLibraryPackageBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    libraryPackage_ = value.toStringUtf8();

  }

  public static final int SERVICE_CLASS_NAMES_FIELD_NUMBER = 2;
  private static final class ServiceClassNamesDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapFieldLite<
      java.lang.String, java.lang.String> serviceClassNames_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
  internalGetServiceClassNames() {
    return serviceClassNames_;
  }
  private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
  internalGetMutableServiceClassNames() {
    if (!serviceClassNames_.isMutable()) {
      serviceClassNames_ = serviceClassNames_.mutableCopy();
    }
    return serviceClassNames_;
  }
  @java.lang.Override

  public int getServiceClassNamesCount() {
    return internalGetServiceClassNames().size();
  }
  /**
   * <pre>
   * Configure the Java class name to use instead of the service's for its
   * corresponding generated GAPIC client. Keys are fully-qualified
   * service names as they appear in the protobuf (including the full
   * the language_settings.java.interface_names" field in gapic.yaml. API
   * teams should otherwise use the service name as it appears in the
   * protobuf.
   *
   * Example of a YAML configuration::
   *
   *  publishing:
   *    java_settings:
   *      service_class_names:
   *        - google.pubsub.v1.Publisher: TopicAdmin
   *        - google.pubsub.v1.Subscriber: SubscriptionAdmin
   * </pre>
   *
   * <code>map&lt;string, string&gt; service_class_names = 2 [json_name = "serviceClassNames"];</code>
   */
  @java.lang.Override

  public boolean containsServiceClassNames(
      java.lang.String key) {
    java.lang.Class<?> keyClass = key.getClass();
    return internalGetServiceClassNames().containsKey(key);
  }
  /**
   * Use {@link #getServiceClassNamesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getServiceClassNames() {
    return getServiceClassNamesMap();
  }
  /**
   * <pre>
   * Configure the Java class name to use instead of the service's for its
   * corresponding generated GAPIC client. Keys are fully-qualified
   * service names as they appear in the protobuf (including the full
   * the language_settings.java.interface_names" field in gapic.yaml. API
   * teams should otherwise use the service name as it appears in the
   * protobuf.
   *
   * Example of a YAML configuration::
   *
   *  publishing:
   *    java_settings:
   *      service_class_names:
   *        - google.pubsub.v1.Publisher: TopicAdmin
   *        - google.pubsub.v1.Subscriber: SubscriptionAdmin
   * </pre>
   *
   * <code>map&lt;string, string&gt; service_class_names = 2 [json_name = "serviceClassNames"];</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.String> getServiceClassNamesMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetServiceClassNames());
  }
  /**
   * <pre>
   * Configure the Java class name to use instead of the service's for its
   * corresponding generated GAPIC client. Keys are fully-qualified
   * service names as they appear in the protobuf (including the full
   * the language_settings.java.interface_names" field in gapic.yaml. API
   * teams should otherwise use the service name as it appears in the
   * protobuf.
   *
   * Example of a YAML configuration::
   *
   *  publishing:
   *    java_settings:
   *      service_class_names:
   *        - google.pubsub.v1.Publisher: TopicAdmin
   *        - google.pubsub.v1.Subscriber: SubscriptionAdmin
   * </pre>
   *
   * <code>map&lt;string, string&gt; service_class_names = 2 [json_name = "serviceClassNames"];</code>
   */
  @java.lang.Override

  public /* nullable */
java.lang.String getServiceClassNamesOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue) {
    java.lang.Class<?> keyClass = key.getClass();
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetServiceClassNames();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Configure the Java class name to use instead of the service's for its
   * corresponding generated GAPIC client. Keys are fully-qualified
   * service names as they appear in the protobuf (including the full
   * the language_settings.java.interface_names" field in gapic.yaml. API
   * teams should otherwise use the service name as it appears in the
   * protobuf.
   *
   * Example of a YAML configuration::
   *
   *  publishing:
   *    java_settings:
   *      service_class_names:
   *        - google.pubsub.v1.Publisher: TopicAdmin
   *        - google.pubsub.v1.Subscriber: SubscriptionAdmin
   * </pre>
   *
   * <code>map&lt;string, string&gt; service_class_names = 2 [json_name = "serviceClassNames"];</code>
   */
  @java.lang.Override

  public java.lang.String getServiceClassNamesOrThrow(
      java.lang.String key) {
    java.lang.Class<?> keyClass = key.getClass();
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetServiceClassNames();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <pre>
   * Configure the Java class name to use instead of the service's for its
   * corresponding generated GAPIC client. Keys are fully-qualified
   * service names as they appear in the protobuf (including the full
   * the language_settings.java.interface_names" field in gapic.yaml. API
   * teams should otherwise use the service name as it appears in the
   * protobuf.
   *
   * Example of a YAML configuration::
   *
   *  publishing:
   *    java_settings:
   *      service_class_names:
   *        - google.pubsub.v1.Publisher: TopicAdmin
   *        - google.pubsub.v1.Subscriber: SubscriptionAdmin
   * </pre>
   *
   * <code>map&lt;string, string&gt; service_class_names = 2 [json_name = "serviceClassNames"];</code>
   */
  private java.util.Map<java.lang.String, java.lang.String>
  getMutableServiceClassNamesMap() {
    return internalGetMutableServiceClassNames();
  }

  public static final int COMMON_FIELD_NUMBER = 3;
  private com.google.api.CommonLanguageSettings common_;
  /**
   * <pre>
   * Some settings.
   * </pre>
   *
   * <code>.google.api.CommonLanguageSettings common = 3 [json_name = "common"];</code>
   */
  @java.lang.Override
  public boolean hasCommon() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Some settings.
   * </pre>
   *
   * <code>.google.api.CommonLanguageSettings common = 3 [json_name = "common"];</code>
   */
  @java.lang.Override
  public com.google.api.CommonLanguageSettings getCommon() {
    return common_ == null ? com.google.api.CommonLanguageSettings.getDefaultInstance() : common_;
  }
  /**
   * <pre>
   * Some settings.
   * </pre>
   *
   * <code>.google.api.CommonLanguageSettings common = 3 [json_name = "common"];</code>
   */
  private void setCommon(com.google.api.CommonLanguageSettings value) {
    value.getClass();
  common_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * Some settings.
   * </pre>
   *
   * <code>.google.api.CommonLanguageSettings common = 3 [json_name = "common"];</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeCommon(com.google.api.CommonLanguageSettings value) {
    value.getClass();
  if (common_ != null &&
        common_ != com.google.api.CommonLanguageSettings.getDefaultInstance()) {
      common_ =
        com.google.api.CommonLanguageSettings.newBuilder(common_).mergeFrom(value).buildPartial();
    } else {
      common_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Some settings.
   * </pre>
   *
   * <code>.google.api.CommonLanguageSettings common = 3 [json_name = "common"];</code>
   */
  private void clearCommon() {  common_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static com.google.api.JavaSettings parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.JavaSettings parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.JavaSettings parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.JavaSettings parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.JavaSettings parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.JavaSettings parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.JavaSettings parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.JavaSettings parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.api.JavaSettings parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.api.JavaSettings parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.JavaSettings parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.JavaSettings parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.api.JavaSettings prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Settings for Java client libraries.
   * </pre>
   *
   * Protobuf type {@code google.api.JavaSettings}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.api.JavaSettings, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.JavaSettings)
      com.google.api.JavaSettingsOrBuilder {
    // Construct using com.google.api.JavaSettings.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The package name to use in Java. Clobbers the java_package option
     * set in the protobuf. This should be used **only** by APIs
     * who have already set the language_settings.java.package_name" field
     * in gapic.yaml. API teams should use the protobuf java_package option
     * where possible.
     *
     * Example of a YAML configuration::
     *
     *  publishing:
     *    java_settings:
     *      library_package: com.google.cloud.pubsub.v1
     * </pre>
     *
     * <code>string library_package = 1 [json_name = "libraryPackage"];</code>
     * @return The libraryPackage.
     */
    @java.lang.Override
    public java.lang.String getLibraryPackage() {
      return instance.getLibraryPackage();
    }
    /**
     * <pre>
     * The package name to use in Java. Clobbers the java_package option
     * set in the protobuf. This should be used **only** by APIs
     * who have already set the language_settings.java.package_name" field
     * in gapic.yaml. API teams should use the protobuf java_package option
     * where possible.
     *
     * Example of a YAML configuration::
     *
     *  publishing:
     *    java_settings:
     *      library_package: com.google.cloud.pubsub.v1
     * </pre>
     *
     * <code>string library_package = 1 [json_name = "libraryPackage"];</code>
     * @return The bytes for libraryPackage.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLibraryPackageBytes() {
      return instance.getLibraryPackageBytes();
    }
    /**
     * <pre>
     * The package name to use in Java. Clobbers the java_package option
     * set in the protobuf. This should be used **only** by APIs
     * who have already set the language_settings.java.package_name" field
     * in gapic.yaml. API teams should use the protobuf java_package option
     * where possible.
     *
     * Example of a YAML configuration::
     *
     *  publishing:
     *    java_settings:
     *      library_package: com.google.cloud.pubsub.v1
     * </pre>
     *
     * <code>string library_package = 1 [json_name = "libraryPackage"];</code>
     * @param value The libraryPackage to set.
     * @return This builder for chaining.
     */
    public Builder setLibraryPackage(
        java.lang.String value) {
      copyOnWrite();
      instance.setLibraryPackage(value);
      return this;
    }
    /**
     * <pre>
     * The package name to use in Java. Clobbers the java_package option
     * set in the protobuf. This should be used **only** by APIs
     * who have already set the language_settings.java.package_name" field
     * in gapic.yaml. API teams should use the protobuf java_package option
     * where possible.
     *
     * Example of a YAML configuration::
     *
     *  publishing:
     *    java_settings:
     *      library_package: com.google.cloud.pubsub.v1
     * </pre>
     *
     * <code>string library_package = 1 [json_name = "libraryPackage"];</code>
     * @return This builder for chaining.
     */
    public Builder clearLibraryPackage() {
      copyOnWrite();
      instance.clearLibraryPackage();
      return this;
    }
    /**
     * <pre>
     * The package name to use in Java. Clobbers the java_package option
     * set in the protobuf. This should be used **only** by APIs
     * who have already set the language_settings.java.package_name" field
     * in gapic.yaml. API teams should use the protobuf java_package option
     * where possible.
     *
     * Example of a YAML configuration::
     *
     *  publishing:
     *    java_settings:
     *      library_package: com.google.cloud.pubsub.v1
     * </pre>
     *
     * <code>string library_package = 1 [json_name = "libraryPackage"];</code>
     * @param value The bytes for libraryPackage to set.
     * @return This builder for chaining.
     */
    public Builder setLibraryPackageBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setLibraryPackageBytes(value);
      return this;
    }

    @java.lang.Override

    public int getServiceClassNamesCount() {
      return instance.getServiceClassNamesMap().size();
    }
    /**
     * <pre>
     * Configure the Java class name to use instead of the service's for its
     * corresponding generated GAPIC client. Keys are fully-qualified
     * service names as they appear in the protobuf (including the full
     * the language_settings.java.interface_names" field in gapic.yaml. API
     * teams should otherwise use the service name as it appears in the
     * protobuf.
     *
     * Example of a YAML configuration::
     *
     *  publishing:
     *    java_settings:
     *      service_class_names:
     *        - google.pubsub.v1.Publisher: TopicAdmin
     *        - google.pubsub.v1.Subscriber: SubscriptionAdmin
     * </pre>
     *
     * <code>map&lt;string, string&gt; service_class_names = 2 [json_name = "serviceClassNames"];</code>
     */
    @java.lang.Override

    public boolean containsServiceClassNames(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      return instance.getServiceClassNamesMap().containsKey(key);
    }

    public Builder clearServiceClassNames() {
      copyOnWrite();
      instance.getMutableServiceClassNamesMap().clear();
      return this;
    }
    /**
     * <pre>
     * Configure the Java class name to use instead of the service's for its
     * corresponding generated GAPIC client. Keys are fully-qualified
     * service names as they appear in the protobuf (including the full
     * the language_settings.java.interface_names" field in gapic.yaml. API
     * teams should otherwise use the service name as it appears in the
     * protobuf.
     *
     * Example of a YAML configuration::
     *
     *  publishing:
     *    java_settings:
     *      service_class_names:
     *        - google.pubsub.v1.Publisher: TopicAdmin
     *        - google.pubsub.v1.Subscriber: SubscriptionAdmin
     * </pre>
     *
     * <code>map&lt;string, string&gt; service_class_names = 2 [json_name = "serviceClassNames"];</code>
     */

    public Builder removeServiceClassNames(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      copyOnWrite();
      instance.getMutableServiceClassNamesMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getServiceClassNamesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getServiceClassNames() {
      return getServiceClassNamesMap();
    }
    /**
     * <pre>
     * Configure the Java class name to use instead of the service's for its
     * corresponding generated GAPIC client. Keys are fully-qualified
     * service names as they appear in the protobuf (including the full
     * the language_settings.java.interface_names" field in gapic.yaml. API
     * teams should otherwise use the service name as it appears in the
     * protobuf.
     *
     * Example of a YAML configuration::
     *
     *  publishing:
     *    java_settings:
     *      service_class_names:
     *        - google.pubsub.v1.Publisher: TopicAdmin
     *        - google.pubsub.v1.Subscriber: SubscriptionAdmin
     * </pre>
     *
     * <code>map&lt;string, string&gt; service_class_names = 2 [json_name = "serviceClassNames"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getServiceClassNamesMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getServiceClassNamesMap());
    }
    /**
     * <pre>
     * Configure the Java class name to use instead of the service's for its
     * corresponding generated GAPIC client. Keys are fully-qualified
     * service names as they appear in the protobuf (including the full
     * the language_settings.java.interface_names" field in gapic.yaml. API
     * teams should otherwise use the service name as it appears in the
     * protobuf.
     *
     * Example of a YAML configuration::
     *
     *  publishing:
     *    java_settings:
     *      service_class_names:
     *        - google.pubsub.v1.Publisher: TopicAdmin
     *        - google.pubsub.v1.Subscriber: SubscriptionAdmin
     * </pre>
     *
     * <code>map&lt;string, string&gt; service_class_names = 2 [json_name = "serviceClassNames"];</code>
     */
    @java.lang.Override

    public /* nullable */
java.lang.String getServiceClassNamesOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, java.lang.String> map =
          instance.getServiceClassNamesMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Configure the Java class name to use instead of the service's for its
     * corresponding generated GAPIC client. Keys are fully-qualified
     * service names as they appear in the protobuf (including the full
     * the language_settings.java.interface_names" field in gapic.yaml. API
     * teams should otherwise use the service name as it appears in the
     * protobuf.
     *
     * Example of a YAML configuration::
     *
     *  publishing:
     *    java_settings:
     *      service_class_names:
     *        - google.pubsub.v1.Publisher: TopicAdmin
     *        - google.pubsub.v1.Subscriber: SubscriptionAdmin
     * </pre>
     *
     * <code>map&lt;string, string&gt; service_class_names = 2 [json_name = "serviceClassNames"];</code>
     */
    @java.lang.Override

    public java.lang.String getServiceClassNamesOrThrow(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, java.lang.String> map =
          instance.getServiceClassNamesMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * Configure the Java class name to use instead of the service's for its
     * corresponding generated GAPIC client. Keys are fully-qualified
     * service names as they appear in the protobuf (including the full
     * the language_settings.java.interface_names" field in gapic.yaml. API
     * teams should otherwise use the service name as it appears in the
     * protobuf.
     *
     * Example of a YAML configuration::
     *
     *  publishing:
     *    java_settings:
     *      service_class_names:
     *        - google.pubsub.v1.Publisher: TopicAdmin
     *        - google.pubsub.v1.Subscriber: SubscriptionAdmin
     * </pre>
     *
     * <code>map&lt;string, string&gt; service_class_names = 2 [json_name = "serviceClassNames"];</code>
     */
    public Builder putServiceClassNames(
        java.lang.String key,
        java.lang.String value) {
      java.lang.Class<?> keyClass = key.getClass();
      java.lang.Class<?> valueClass = value.getClass();
      copyOnWrite();
      instance.getMutableServiceClassNamesMap().put(key, value);
      return this;
    }
    /**
     * <pre>
     * Configure the Java class name to use instead of the service's for its
     * corresponding generated GAPIC client. Keys are fully-qualified
     * service names as they appear in the protobuf (including the full
     * the language_settings.java.interface_names" field in gapic.yaml. API
     * teams should otherwise use the service name as it appears in the
     * protobuf.
     *
     * Example of a YAML configuration::
     *
     *  publishing:
     *    java_settings:
     *      service_class_names:
     *        - google.pubsub.v1.Publisher: TopicAdmin
     *        - google.pubsub.v1.Subscriber: SubscriptionAdmin
     * </pre>
     *
     * <code>map&lt;string, string&gt; service_class_names = 2 [json_name = "serviceClassNames"];</code>
     */
    public Builder putAllServiceClassNames(
        java.util.Map<java.lang.String, java.lang.String> values) {
      copyOnWrite();
      instance.getMutableServiceClassNamesMap().putAll(values);
      return this;
    }

    /**
     * <pre>
     * Some settings.
     * </pre>
     *
     * <code>.google.api.CommonLanguageSettings common = 3 [json_name = "common"];</code>
     */
    @java.lang.Override
    public boolean hasCommon() {
      return instance.hasCommon();
    }
    /**
     * <pre>
     * Some settings.
     * </pre>
     *
     * <code>.google.api.CommonLanguageSettings common = 3 [json_name = "common"];</code>
     */
    @java.lang.Override
    public com.google.api.CommonLanguageSettings getCommon() {
      return instance.getCommon();
    }
    /**
     * <pre>
     * Some settings.
     * </pre>
     *
     * <code>.google.api.CommonLanguageSettings common = 3 [json_name = "common"];</code>
     */
    public Builder setCommon(com.google.api.CommonLanguageSettings value) {
      copyOnWrite();
      instance.setCommon(value);
      return this;
      }
    /**
     * <pre>
     * Some settings.
     * </pre>
     *
     * <code>.google.api.CommonLanguageSettings common = 3 [json_name = "common"];</code>
     */
    public Builder setCommon(
        com.google.api.CommonLanguageSettings.Builder builderForValue) {
      copyOnWrite();
      instance.setCommon(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Some settings.
     * </pre>
     *
     * <code>.google.api.CommonLanguageSettings common = 3 [json_name = "common"];</code>
     */
    public Builder mergeCommon(com.google.api.CommonLanguageSettings value) {
      copyOnWrite();
      instance.mergeCommon(value);
      return this;
    }
    /**
     * <pre>
     * Some settings.
     * </pre>
     *
     * <code>.google.api.CommonLanguageSettings common = 3 [json_name = "common"];</code>
     */
    public Builder clearCommon() {  copyOnWrite();
      instance.clearCommon();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.api.JavaSettings)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.api.JavaSettings();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "libraryPackage_",
            "serviceClassNames_",
            ServiceClassNamesDefaultEntryHolder.defaultEntry,
            "common_",
          };
          java.lang.String info =
              "\u0000\u0003\u0000\u0001\u0001\u0003\u0003\u0001\u0000\u0000\u0001\u0208\u00022\u0003" +
              "\u1009\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.api.JavaSettings> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.api.JavaSettings.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.api.JavaSettings>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.api.JavaSettings)
  private static final com.google.api.JavaSettings DEFAULT_INSTANCE;
  static {
    JavaSettings defaultInstance = new JavaSettings();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      JavaSettings.class, defaultInstance);
  }

  public static com.google.api.JavaSettings getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<JavaSettings> PARSER;

  public static com.google.protobuf.Parser<JavaSettings> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

