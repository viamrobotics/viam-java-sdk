// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/geo/type/viewport.proto

// Protobuf Java Version: 3.25.2
package com.google.geo.type;

/**
 * <pre>
 * A latitude-longitude viewport, represented as two diagonally opposite `low`
 * and `high` points. A viewport is considered a closed region, i.e. it includes
 * its boundary. The latitude bounds must range between -90 to 90 degrees
 * inclusive, and the longitude bounds must range between -180 to 180 degrees
 * inclusive. Various cases include:
 *
 *  - If `low` = `high`, the viewport consists of that single point.
 *
 *  - If `low.longitude` &gt; `high.longitude`, the longitude range is inverted
 *    (the viewport crosses the 180 degree longitude line).
 *
 *  - If `low.longitude` = -180 degrees and `high.longitude` = 180 degrees,
 *    the viewport includes all longitudes.
 *
 *  - If `low.longitude` = 180 degrees and `high.longitude` = -180 degrees,
 *    the longitude range is empty.
 *
 *  - If `low.latitude` &gt; `high.latitude`, the latitude range is empty.
 *
 * Both `low` and `high` must be populated, and the represented box cannot be
 * empty (as specified by the definitions above). An empty viewport will result
 * in an error.
 *
 * For example, this viewport fully encloses New York City:
 *
 * {
 *     "low": {
 *         "latitude": 40.477398,
 *         "longitude": -74.259087
 *     },
 *     "high": {
 *         "latitude": 40.91618,
 *         "longitude": -73.70018
 *     }
 * }
 * </pre>
 *
 * Protobuf type {@code google.geo.type.Viewport}
 */
public  final class Viewport extends
    com.google.protobuf.GeneratedMessageLite<
        Viewport, Viewport.Builder> implements
    // @@protoc_insertion_point(message_implements:google.geo.type.Viewport)
    ViewportOrBuilder {
  private Viewport() {
  }
  private int bitField0_;
  public static final int LOW_FIELD_NUMBER = 1;
  private com.google.type.LatLng low_;
  /**
   * <pre>
   * Required. The low point of the viewport.
   * </pre>
   *
   * <code>.google.type.LatLng low = 1 [json_name = "low"];</code>
   */
  @java.lang.Override
  public boolean hasLow() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Required. The low point of the viewport.
   * </pre>
   *
   * <code>.google.type.LatLng low = 1 [json_name = "low"];</code>
   */
  @java.lang.Override
  public com.google.type.LatLng getLow() {
    return low_ == null ? com.google.type.LatLng.getDefaultInstance() : low_;
  }
  /**
   * <pre>
   * Required. The low point of the viewport.
   * </pre>
   *
   * <code>.google.type.LatLng low = 1 [json_name = "low"];</code>
   */
  private void setLow(com.google.type.LatLng value) {
    value.getClass();
  low_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * Required. The low point of the viewport.
   * </pre>
   *
   * <code>.google.type.LatLng low = 1 [json_name = "low"];</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeLow(com.google.type.LatLng value) {
    value.getClass();
  if (low_ != null &&
        low_ != com.google.type.LatLng.getDefaultInstance()) {
      low_ =
        com.google.type.LatLng.newBuilder(low_).mergeFrom(value).buildPartial();
    } else {
      low_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Required. The low point of the viewport.
   * </pre>
   *
   * <code>.google.type.LatLng low = 1 [json_name = "low"];</code>
   */
  private void clearLow() {  low_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int HIGH_FIELD_NUMBER = 2;
  private com.google.type.LatLng high_;
  /**
   * <pre>
   * Required. The high point of the viewport.
   * </pre>
   *
   * <code>.google.type.LatLng high = 2 [json_name = "high"];</code>
   */
  @java.lang.Override
  public boolean hasHigh() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Required. The high point of the viewport.
   * </pre>
   *
   * <code>.google.type.LatLng high = 2 [json_name = "high"];</code>
   */
  @java.lang.Override
  public com.google.type.LatLng getHigh() {
    return high_ == null ? com.google.type.LatLng.getDefaultInstance() : high_;
  }
  /**
   * <pre>
   * Required. The high point of the viewport.
   * </pre>
   *
   * <code>.google.type.LatLng high = 2 [json_name = "high"];</code>
   */
  private void setHigh(com.google.type.LatLng value) {
    value.getClass();
  high_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * Required. The high point of the viewport.
   * </pre>
   *
   * <code>.google.type.LatLng high = 2 [json_name = "high"];</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeHigh(com.google.type.LatLng value) {
    value.getClass();
  if (high_ != null &&
        high_ != com.google.type.LatLng.getDefaultInstance()) {
      high_ =
        com.google.type.LatLng.newBuilder(high_).mergeFrom(value).buildPartial();
    } else {
      high_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * Required. The high point of the viewport.
   * </pre>
   *
   * <code>.google.type.LatLng high = 2 [json_name = "high"];</code>
   */
  private void clearHigh() {  high_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static com.google.geo.type.Viewport parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.geo.type.Viewport parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.geo.type.Viewport parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.geo.type.Viewport parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.geo.type.Viewport parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.geo.type.Viewport parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.geo.type.Viewport parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.geo.type.Viewport parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.geo.type.Viewport parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.geo.type.Viewport parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.geo.type.Viewport parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.geo.type.Viewport parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.geo.type.Viewport prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * A latitude-longitude viewport, represented as two diagonally opposite `low`
   * and `high` points. A viewport is considered a closed region, i.e. it includes
   * its boundary. The latitude bounds must range between -90 to 90 degrees
   * inclusive, and the longitude bounds must range between -180 to 180 degrees
   * inclusive. Various cases include:
   *
   *  - If `low` = `high`, the viewport consists of that single point.
   *
   *  - If `low.longitude` &gt; `high.longitude`, the longitude range is inverted
   *    (the viewport crosses the 180 degree longitude line).
   *
   *  - If `low.longitude` = -180 degrees and `high.longitude` = 180 degrees,
   *    the viewport includes all longitudes.
   *
   *  - If `low.longitude` = 180 degrees and `high.longitude` = -180 degrees,
   *    the longitude range is empty.
   *
   *  - If `low.latitude` &gt; `high.latitude`, the latitude range is empty.
   *
   * Both `low` and `high` must be populated, and the represented box cannot be
   * empty (as specified by the definitions above). An empty viewport will result
   * in an error.
   *
   * For example, this viewport fully encloses New York City:
   *
   * {
   *     "low": {
   *         "latitude": 40.477398,
   *         "longitude": -74.259087
   *     },
   *     "high": {
   *         "latitude": 40.91618,
   *         "longitude": -73.70018
   *     }
   * }
   * </pre>
   *
   * Protobuf type {@code google.geo.type.Viewport}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.geo.type.Viewport, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.geo.type.Viewport)
      com.google.geo.type.ViewportOrBuilder {
    // Construct using com.google.geo.type.Viewport.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Required. The low point of the viewport.
     * </pre>
     *
     * <code>.google.type.LatLng low = 1 [json_name = "low"];</code>
     */
    @java.lang.Override
    public boolean hasLow() {
      return instance.hasLow();
    }
    /**
     * <pre>
     * Required. The low point of the viewport.
     * </pre>
     *
     * <code>.google.type.LatLng low = 1 [json_name = "low"];</code>
     */
    @java.lang.Override
    public com.google.type.LatLng getLow() {
      return instance.getLow();
    }
    /**
     * <pre>
     * Required. The low point of the viewport.
     * </pre>
     *
     * <code>.google.type.LatLng low = 1 [json_name = "low"];</code>
     */
    public Builder setLow(com.google.type.LatLng value) {
      copyOnWrite();
      instance.setLow(value);
      return this;
      }
    /**
     * <pre>
     * Required. The low point of the viewport.
     * </pre>
     *
     * <code>.google.type.LatLng low = 1 [json_name = "low"];</code>
     */
    public Builder setLow(
        com.google.type.LatLng.Builder builderForValue) {
      copyOnWrite();
      instance.setLow(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Required. The low point of the viewport.
     * </pre>
     *
     * <code>.google.type.LatLng low = 1 [json_name = "low"];</code>
     */
    public Builder mergeLow(com.google.type.LatLng value) {
      copyOnWrite();
      instance.mergeLow(value);
      return this;
    }
    /**
     * <pre>
     * Required. The low point of the viewport.
     * </pre>
     *
     * <code>.google.type.LatLng low = 1 [json_name = "low"];</code>
     */
    public Builder clearLow() {  copyOnWrite();
      instance.clearLow();
      return this;
    }

    /**
     * <pre>
     * Required. The high point of the viewport.
     * </pre>
     *
     * <code>.google.type.LatLng high = 2 [json_name = "high"];</code>
     */
    @java.lang.Override
    public boolean hasHigh() {
      return instance.hasHigh();
    }
    /**
     * <pre>
     * Required. The high point of the viewport.
     * </pre>
     *
     * <code>.google.type.LatLng high = 2 [json_name = "high"];</code>
     */
    @java.lang.Override
    public com.google.type.LatLng getHigh() {
      return instance.getHigh();
    }
    /**
     * <pre>
     * Required. The high point of the viewport.
     * </pre>
     *
     * <code>.google.type.LatLng high = 2 [json_name = "high"];</code>
     */
    public Builder setHigh(com.google.type.LatLng value) {
      copyOnWrite();
      instance.setHigh(value);
      return this;
      }
    /**
     * <pre>
     * Required. The high point of the viewport.
     * </pre>
     *
     * <code>.google.type.LatLng high = 2 [json_name = "high"];</code>
     */
    public Builder setHigh(
        com.google.type.LatLng.Builder builderForValue) {
      copyOnWrite();
      instance.setHigh(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Required. The high point of the viewport.
     * </pre>
     *
     * <code>.google.type.LatLng high = 2 [json_name = "high"];</code>
     */
    public Builder mergeHigh(com.google.type.LatLng value) {
      copyOnWrite();
      instance.mergeHigh(value);
      return this;
    }
    /**
     * <pre>
     * Required. The high point of the viewport.
     * </pre>
     *
     * <code>.google.type.LatLng high = 2 [json_name = "high"];</code>
     */
    public Builder clearHigh() {  copyOnWrite();
      instance.clearHigh();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.geo.type.Viewport)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.geo.type.Viewport();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "low_",
            "high_",
          };
          java.lang.String info =
              "\u0000\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
              "\u1009\u0001";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.geo.type.Viewport> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.geo.type.Viewport.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.geo.type.Viewport>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.geo.type.Viewport)
  private static final com.google.geo.type.Viewport DEFAULT_INSTANCE;
  static {
    Viewport defaultInstance = new Viewport();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      Viewport.class, defaultInstance);
  }

  public static com.google.geo.type.Viewport getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Viewport> PARSER;

  public static com.google.protobuf.Parser<Viewport> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

